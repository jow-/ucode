{"list":[{"title":"module:core","link":"<a href=\"module-core.html\">core</a>","description":"<h1 id=\"builtin-functions\">Builtin functions</h1>\n<p>The core namespace is not an actual module but refers to the set of\nbuiltin functions and properties available to <code>ucode</code> scripts.</p>"},{"title":"module:core#arrtoip","link":"<a href=\"module-core.html#arrtoip\">arrtoip</a>","description":"<p>Convert the given input array of byte values to an IP address string.</p>\n<p>Input arrays of length 4 are converted to IPv4 addresses, arrays of length 16\nto IPv6 ones. All other lengths are rejected. If any array element is not an\ninteger or exceeds the range 0..255 (inclusive), the array is rejected.</p>\n<p>Returns a string containing the formatted IP address.\nReturns <code>null</code> if the input array was invalid.</p>"},{"title":"module:core#assert","link":"<a href=\"module-core.html#assert\">assert</a>","description":"<p>Raise an exception with the given message parameter when the value in <code>cond</code>\nis not truish.</p>\n<p>When <code>message</code> is omitted, the default value is <code>Assertion failed</code>.</p>"},{"title":"module:core#b64dec","link":"<a href=\"module-core.html#b64dec\">b64dec</a>","description":"<p>Decodes the given base64 encoded string and returns the decoded result.</p>\n<ul>\n<li>If non-whitespace, non-base64 characters are encountered, if invalid\npadding or trailing garbage is found, the function returns <code>null</code>.</li>\n<li>If a non-string argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#b64enc","link":"<a href=\"module-core.html#b64enc\">b64enc</a>","description":"<p>Encodes the given string into base64 and returns the resulting string.</p>\n<ul>\n<li>If a non-string argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#call","link":"<a href=\"module-core.html#call\">call</a>","description":"<p>Calls the given function value with a modified environment.</p>\n<p>The given <code>ctx</code> argument is used as <code>this</code> context for the invoked function\nand the given <code>scope</code> value as global environment. Any further arguments are\npassed to the invoked function as-is.</p>\n<p>When <code>ctx</code> is omitted or <code>null</code>, the function will get invoked with <code>this</code>\nbeing <code>null</code>.</p>\n<p>When <code>scope</code> is omitted or <code>null</code>, the function will get executed with the\ncurrent global environment of the running program. When <code>scope</code> is set to a\ndictionary, the dictionary is used as global function environment.</p>\n<p>When the <code>scope</code> dictionary has no prototype, the current global environment\nwill be set as prototype, means the scope will inherit from it.</p>\n<p>When a scope prototype is set, it is kept. This allows passing an isolated\n(sandboxed) function scope without access to the global environment.</p>\n<p>Any further argument is forwarded as-is to the invoked function as function\ncall argument.</p>\n<p>Returns <code>null</code> if the given function value <code>fn</code> is not callable.</p>\n<p>Returns the return value of the invoked function in all other cases.</p>\n<p>Forwards exceptions thrown by the invoked function.</p>"},{"title":"module:core#chr","link":"<a href=\"module-core.html#chr\">chr</a>","description":"<p>Converts each given numeric value to a byte and return the resulting string.\nInvalid numeric values or values &lt; 0 result in <code>\\0</code> bytes, values larger than\n255 are truncated to 255.</p>\n<p>Returns a new strings consisting of the given byte values.</p>"},{"title":"module:core#clock","link":"<a href=\"module-core.html#clock\">clock</a>","description":"<p>Reads the current second and microsecond value of the system clock.</p>\n<p>By default, the realtime clock is queried which might skew forwards or\nbackwards due to NTP changes, system sleep modes etc. If a truish value is\npassed as argument, the monotonic system clock is queried instead, which will\nreturn the monotonically increasing time since some arbitrary point in the\npast (usually the system boot time).</p>\n<p>Returns a two element array containing the full seconds as the first element\nand the nanosecond fraction as the second element.</p>\n<p>Returns <code>null</code> if a monotonic clock value is requested and the system does\nnot implement this clock type.</p>"},{"title":"module:core#die","link":"<a href=\"module-core.html#die\">die</a>","description":"<p>Raise an exception with the given message and abort execution.</p>"},{"title":"module:core#exists","link":"<a href=\"module-core.html#exists\">exists</a>","description":"<p>Check whether the given key exists within the given object value.</p>\n<p>Returns <code>true</code> if the given key is present within the object passed as the\nfirst argument, otherwise <code>false</code>.</p>"},{"title":"module:core#exit","link":"<a href=\"module-core.html#exit\">exit</a>","description":"<p>Terminate the interpreter with the given exit code.</p>\n<p>This function does not return.</p>"},{"title":"module:core#filter","link":"<a href=\"module-core.html#filter\">filter</a>","description":"<p>Filter the array passed as the first argument by invoking the function\nspecified in the second argument for each array item.</p>\n<p>If the invoked function returns a truthy result, the item is retained,\notherwise, it is dropped. The filter function is invoked with three\narguments:</p>\n<ol>\n<li>The array value</li>\n<li>The current index</li>\n<li>The array being filtered</li>\n</ol>\n<p>(Note that the <code>map</code> function behaves similarly to <code>filter</code> with respect\nto its <code>fn</code> parameters.)</p>\n<p>Returns a new array containing only retained items, in the same order as\nthe input array.</p>"},{"title":"module:core#gc","link":"<a href=\"module-core.html#gc\">gc</a>","description":"<p>Interacts with the mark and sweep garbage collector of the running ucode\nvirtual machine.</p>\n<p>Depending on the given <code>operation</code> string argument, the meaning of <code>argument</code>\nand the function return value differs.</p>\n<p>The following operations are defined:</p>\n<ul>\n<li><code>collect</code> - Perform a complete garbage collection cycle, returns <code>true</code>.</li>\n<li><code>start</code> - (Re-)start periodic garbage collection, <code>argument</code> is an optional\ninteger in the range <code>1..65535</code> specifying the interval.\nDefaults to <code>1000</code> if omitted. Returns <code>true</code> if the periodic GC\nwas previously stopped and is now started or if the interval\nchanged. Returns <code>false</code> otherwise.</li>\n<li><code>stop</code> - Stop periodic garbage collection. Returns <code>true</code> if the periodic\nGC was previously started and is now stopped, <code>false</code> otherwise.</li>\n<li><code>count</code> - Count the amount of active complex object references in the VM\ncontext, returns the counted amount.</li>\n</ul>\n<p>If the <code>operation</code> argument is omitted, the default is <code>collect</code>.</p>"},{"title":"module:core#getenv","link":"<a href=\"module-core.html#getenv\">getenv</a>","description":"<p>Query an environment variable or then entire environment.</p>\n<p>Returns the value of the given environment variable, or - if omitted - a\ndictionary containing all environment variables.</p>"},{"title":"module:core#gmtime","link":"<a href=\"module-core.html#gmtime\">gmtime</a>","description":"<p>Like <code>localtime()</code> but interpreting the given epoch value as UTC time.</p>\n<p>See {@link module:core#localtime|localtime()} for details on the return value.</p>"},{"title":"module:core#hex","link":"<a href=\"module-core.html#hex\">hex</a>","description":"<p>Converts the given hexadecimal string into a number.</p>\n<p>Returns the resulting integer value or <code>NaN</code> if the input value cannot be\ninterpreted as hexadecimal number.</p>"},{"title":"module:core#hexdec","link":"<a href=\"module-core.html#hexdec\">hexdec</a>","description":"<p>Decodes the given hexadecimal digit string into a byte string, optionally\nskipping specified characters.</p>\n<p>If the characters to skip are not specified, a default of <code>&quot; \\t\\n&quot;</code> is used.</p>\n<p>Returns null if the input string contains invalid characters or an uneven\namount of hex digits.</p>\n<p>Returns the decoded byte string on success.</p>"},{"title":"module:core#hexenc","link":"<a href=\"module-core.html#hexenc\">hexenc</a>","description":"<p>Encodes the given byte string into a hexadecimal digit string, converting\nthe input value to a string if needed.</p>"},{"title":"module:core#include","link":"<a href=\"module-core.html#include\">include</a>","description":"<p>Evaluate and include the file at the given path and optionally override the\nexecution scope with the given scope object.</p>\n<p>By default, the file is executed within the same scope as the calling\n<code>include()</code>, but by passing an object as the second argument, it is possible\nto extend the scope available to the included file.</p>\n<p>This is useful to supply additional properties as global variables to the\nincluded code. To sandbox included code, that is giving it only access to\nexplicitly provided properties, the <code>proto()</code> function can be used to create\na scope object with an empty prototype.</p>"},{"title":"module:core#index","link":"<a href=\"module-core.html#index\">index</a>","description":"<p>Finds the given value passed as the second argument within the array or\nstring specified in the first argument.</p>\n<p>Returns the first matching array index or first matching string offset or\n<code>-1</code> if the value was not found.</p>\n<p>Returns <code>null</code> if the first argument was neither an array nor a string.</p>"},{"title":"module:core#int","link":"<a href=\"module-core.html#int\">int</a>","description":"<p>Converts the given value to an integer, using an optional base.</p>\n<p>Returns <code>NaN</code> if the value is not convertible.</p>"},{"title":"module:core#iptoarr","link":"<a href=\"module-core.html#iptoarr\">iptoarr</a>","description":"<p>Convert the given IP address string to an array of byte values.</p>\n<p>IPv4 addresses result in arrays of 4 integers while IPv6 ones in arrays\ncontaining 16 integers. The resulting array can be turned back into IP\naddress strings using the inverse <code>arrtoip()</code> function.</p>\n<p>Returns an array containing the address byte values.\nReturns <code>null</code> if the given argument is not a string or an invalid IP.</p>"},{"title":"module:core#join","link":"<a href=\"module-core.html#join\">join</a>","description":"<p>Joins the array passed as the second argument into a string, using the\nseparator passed in the first argument as glue.</p>\n<p>Returns <code>null</code> if the second argument is not an array.</p>"},{"title":"module:core#json","link":"<a href=\"module-core.html#json\">json</a>","description":"<p>Parse the given string or resource as JSON and return the resulting value.</p>\n<p>If the input argument is a plain string, it is directly parsed as JSON.</p>\n<p>If an array, object or resource value is given, this function will attempt to\ninvoke a <code>read()</code> method on it to read chunks of input text to incrementally\nparse as JSON data. Reading will stop if the object's <code>read()</code> method returns\neither <code>null</code> or an empty string.</p>\n<p>Throws an exception on parse errors, trailing garbage, or premature EOF.</p>\n<p>Returns the parsed JSON data.</p>"},{"title":"module:core#keys","link":"<a href=\"module-core.html#keys\">keys</a>","description":"<p>Enumerates all object key names.</p>\n<p>Returns an array of all key names present in the passed object.\nReturns <code>null</code> if the given argument is not an object.</p>"},{"title":"module:core#lc","link":"<a href=\"module-core.html#lc\">lc</a>","description":"<p>Convert the given string to lowercase and return the resulting string.</p>\n<p>Returns <code>null</code> if the given argument could not be converted to a string.</p>"},{"title":"module:core#length","link":"<a href=\"module-core.html#length\">length</a>","description":"<p>Determine the length of the given object, array or string.</p>\n<p>Returns the length of the given value.</p>\n<ul>\n<li>For strings, the length is the amount of bytes within the string</li>\n<li>For arrays, the length is the amount of array elements</li>\n<li>For objects, the length is defined as the amount of keys</li>\n</ul>\n<p>Returns <code>null</code> if the given argument is not an object, array or string.</p>"},{"title":"module:core#loadfile","link":"<a href=\"module-core.html#loadfile\">loadfile</a>","description":"<p>Compiles the given file into a ucode program and returns the resulting\nprogram entry function.</p>\n<p>See {@link module:core#loadstring|<code>loadstring()</code>} for details.</p>\n<p>Returns the compiled program entry function.</p>\n<p>Throws an exception on compilation or file I/O errors.</p>"},{"title":"module:core#loadstring","link":"<a href=\"module-core.html#loadstring\">loadstring</a>","description":"<p>Compiles the given code string into a ucode program and returns the resulting\nprogram entry function.</p>\n<p>The optional <code>options</code> dictionary overrides parse and compile options.</p>\n<ul>\n<li>If a non-string <code>code</code> argument is given, it is implicitly converted to a\nstring value first.</li>\n<li>If <code>options</code> is omitted or a non-object value, the compile options of the\nrunning ucode program are reused.</li>\n</ul>\n<p>See {@link module:core.ParseConfig|ParseConfig} for known keys within the\n<code>options</code> object. Unrecognized keys are ignored, unspecified options default\nto those of the running program.</p>\n<p>Returns the compiled program entry function.</p>\n<p>Throws an exception on compilation errors.</p>"},{"title":"module:core#localtime","link":"<a href=\"module-core.html#localtime\">localtime</a>","description":"<p>Return the given epoch timestamp (or now, if omitted) as a dictionary\ncontaining broken-down date and time information according to the local\nsystem timezone.</p>\n<p>See {@link module:core.TimeSpec|TimeSpec} for a description of the fields.</p>\n<p>Note that in contrast to the underlying <code>localtime(3)</code> C library function,\nthe values for <code>mon</code>, <code>wday</code>, and <code>yday</code> are 1-based, and the <code>year</code> is\n1900-based.</p>"},{"title":"module:core#ltrim","link":"<a href=\"module-core.html#ltrim\">ltrim</a>","description":"<p>Trim any of the specified characters from the start of the string.\nIf the second argument is omitted, trims the characters <code> </code> (space), '\\t',\n'\\r', and '\\n'.</p>\n<p>Returns the left trimmed string.</p>"},{"title":"module:core#map","link":"<a href=\"module-core.html#map\">map</a>","description":"<p>Transform the array passed as the first argument by invoking the function\nspecified in the second argument for each array item.</p>\n<p>The mapping function is invoked with three arguments (see examples, below,\nfor some possibly counterintuitive usage):</p>\n<ol>\n<li>The array value</li>\n<li>The current index</li>\n<li>The array being filtered</li>\n</ol>\n<p>(Note that the <code>filter</code> function behaves similarly to <code>map</code> with respect\nto its <code>fn</code> parameters.)</p>\n<p>Returns a new array of the same length as the input array containing the\ntransformed values.</p>"},{"title":"module:core#match","link":"<a href=\"module-core.html#match\">match</a>","description":"<p>Match the given string against the regular expression pattern specified as\nthe second argument.</p>\n<p>If the passed regular expression uses the <code>g</code> flag, the return value will be\nan array of arrays describing all found occurrences within the string.</p>\n<p>Without the <code>g</code> modifier, an array describing the first match is returned.</p>\n<p>Returns <code>null</code> if the pattern was not found within the given string.</p>"},{"title":"module:core#max","link":"<a href=\"module-core.html#max\">max</a>","description":"<p>Return the largest value among all parameters passed to the function.</p>"},{"title":"module:core#min","link":"<a href=\"module-core.html#min\">min</a>","description":"<p>Return the smallest value among all parameters passed to the function.</p>"},{"title":"module:core#ord","link":"<a href=\"module-core.html#ord\">ord</a>","description":"<p>Without further arguments, this function returns the byte value of the first\ncharacter in the given string.</p>\n<p>If an offset argument is supplied, the byte value of the character at this\nposition is returned. If an invalid index is supplied, the function will\nreturn <code>null</code>. Negative index entries are counted towards the end of the\nstring, e.g. <code>-2</code> will return the value of the second last character.</p>\n<p>Returns the byte value of the character.\nReturns <code>null</code> if the offset is invalid or if the input is not a string.</p>"},{"title":"module:core#pop","link":"<a href=\"module-core.html#pop\">pop</a>","description":"<p>Pops the last item from the given array and returns it.</p>\n<p>Returns <code>null</code> if the array was empty or if a non-array argument was passed.</p>"},{"title":"module:core#print","link":"<a href=\"module-core.html#print\">print</a>","description":"<p>Print any of the given values to stdout.</p>\n<p>The <code>print()</code> function writes a string representation of each given argument\nto stdout and returns the amount of bytes written.</p>\n<p>String values are printed as-is, integer and double values are printed in\ndecimal notation, boolean values are printed as <code>true</code> or <code>false</code> while\narrays and objects are converted to their JSON representation before being\nwritten to the standard output. The <code>null</code> value is represented by an empty\nstring so <code>print(null)</code> would print nothing. Resource values are printed in\nthe form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Examples:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>print(1 != 2);                       // Will print 'true'\nprint(0xff);                         // Will print '255'\nprint(2e3);                          // Will print '2000'\nprint(null);                         // Will print nothing\nprint({ hello: true, world: 123 });  // Will print '{ &quot;hello&quot;: true, &quot;world&quot;: 123 }'\nprint([1,2,3]);                      // Will print '[ 1, 2, 3 ]'\n\nprint(proto({ foo: &quot;bar&quot; },          // Will print 'MyObj'\n  { tostring: () => &quot;MyObj&quot; }));     // instead of '{ &quot;foo&quot;: &quot;bar&quot; }'\n\n</code></pre>\n<p>Returns the amount of bytes printed.</p>"},{"title":"module:core#printf","link":"<a href=\"module-core.html#printf\">printf</a>","description":"<p>Formats the given arguments according to the given format string and outputs\nthe result to stdout.</p>\n<p>Ucode supports a restricted subset of the formats allowed by the underlying\nlibc's <code>printf()</code> implementation, namely it allows the <code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>,\n<code>x</code>, <code>X</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code>, <code>G</code>, <code>c</code> and <code>s</code> conversions.</p>\n<p>Additionally, an ucode specific <code>J</code> format is implemented, which causes the\ncorresponding value to be formatted as JSON string. By prefixing the <code>J</code>\nformat letter with a precision specifier, the resulting JSON output will be\npretty printed. A precision of <code>0</code> will use tabs for indentation, any other\npositive precision will use that many spaces for indentation while a negative\nor omitted precision specifier will turn off pretty printing.</p>\n<p>Other format specifiers such as <code>n</code> or <code>z</code> are not accepted and returned\nverbatim. Format specifiers including <code>*</code> directives are rejected as well.</p>\n<p>Returns the number of bytes written to the standard output.</p>"},{"title":"module:core#proto","link":"<a href=\"module-core.html#proto\">proto</a>","description":"<p>Get or set the prototype of the array or object value <code>val</code>.</p>\n<p>When invoked without a second argument, the function returns the current\nprototype of the value in <code>val</code> or <code>null</code> if there is no prototype or if the\ngiven value is neither an object nor an array.</p>\n<p>When invoked with a second prototype argument, the given <code>proto</code> value is set\nas the prototype on the array or object in <code>val</code>.</p>\n<p>Throws an exception if the given prototype value is not an object.</p>"},{"title":"module:core#push","link":"<a href=\"module-core.html#push\">push</a>","description":"<p>Pushes the given argument(s) to the given array.</p>\n<p>Returns the last pushed value.</p>"},{"title":"module:core#regexp","link":"<a href=\"module-core.html#regexp\">regexp</a>","description":"<p>Construct a regular expression instance from the given <code>source</code> pattern\nstring and any flags optionally specified by the <code>flags</code> argument.</p>\n<ul>\n<li>Throws a type error exception if <code>flags</code> is not a string or if the string\nin <code>flags</code> contains unrecognized regular expression flag characters.</li>\n<li>Throws a syntax error when the pattern in <code>source</code> cannot be compiled into\na valid regular expression.</li>\n</ul>\n<p>Returns the compiled regular expression value.</p>"},{"title":"module:core#render","link":"<a href=\"module-core.html#render\">render</a>","description":"<p>When invoked with a string value as the first argument, the function acts\nlike <code>include()</code> but captures the output of the included file as a string and\nreturns the captured contents.</p>\n<p>The second argument is treated as the scope.</p>\n<p>When invoked with a function value as the first argument, <code>render()</code> calls\nthe given function and passes all subsequent arguments to it.</p>\n<p>Any output produced by the called function is captured and returned as a\nstring. The return value of the called function is discarded.</p>"},{"title":"module:core#replace","link":"<a href=\"module-core.html#replace\">replace</a>","description":"<p>Replace occurrences of the specified pattern in the string passed as the\nfirst argument.</p>\n<ul>\n<li>The pattern value may be either a regular expression or a plain string.</li>\n<li>The replace value may be a function which is invoked for each found pattern\nor any other value which is converted into a plain string and used as\nreplacement.</li>\n<li>When an optional limit is specified, substitutions are performed only that\nmany times.</li>\n<li>If the pattern is a regular expression and not using the <code>g</code> flag, then\nonly the first occurrence in the string is replaced.</li>\n<li>If the <code>g</code> flag is used or if the pattern is not a regular expression, all\noccurrences are replaced.</li>\n<li>If the replace value is a callback function, it is invoked with the found\nsubstring as the first and any capture group values as subsequent\nparameters.</li>\n<li>If the replace value is a string, specific substrings are substituted\nbefore it is inserted into the result.</li>\n</ul>\n<p>Returns a new string with the pattern replaced.</p>"},{"title":"module:core#require","link":"<a href=\"module-core.html#require\">require</a>","description":"<p>Load and evaluate ucode scripts or shared library extensions.</p>\n<p>The <code>require()</code> function expands each member of the global\n<code>REQUIRE_SEARCH_PATH</code> array to a filesystem path by replacing the <code>*</code>\nplaceholder with a slash-separated version of the given dotted module name\nand subsequently tries to load a file at the resulting location.</p>\n<p>If a file is found at one of the search path locations, it is compiled and\nevaluated or loaded via the C runtime's <code>dlopen()</code> function, depending on\nwhether the found file is a ucode script or a compiled dynamic library.</p>\n<p>The resulting program function of the compiled/loaded module is then\nsubsequently executed with the current global environment, without a <code>this</code>\ncontext and without arguments.</p>\n<p>Finally, the return value of the invoked program function is returned back\nby <code>require()</code> to the caller.</p>\n<p>By default, modules are cached in the global <code>modules</code> dictionary and\nsubsequent attempts to require the same module will return the cached module\ndictionary entry without re-evaluating the module.</p>\n<p>To force reloading a module, the corresponding entry from the global\n<code>modules</code> dictionary can be deleted.</p>\n<p>To preload a module or to provide a &quot;virtual&quot; module without a corresponding\nfilesystem resource, an entry can be manually added to the global <code>modules</code>\ndictionary.</p>\n<p>Summarized, the <code>require()</code> function can be roughly described by the\nfollowing code:</p>\n<pre class=\"prettyprint source\"><code>function require(name) {\n    if (exists(modules, name))\n        return modules[name];\n\n    for (const item in REQUIRE_SEARCH_PATH) {\n        const modpath = replace(item, '*', replace(name, '.', '/'));\n        const entryfunc = loadfile(modpath, { raw_mode: true });\n\n        if (entryfunc) {\n            const modval = entryfunc();\n            modules[name] = modval;\n\n            return modval;\n        }\n    }\n\n    die(`Module ${name} not found`);\n}\n</code></pre>\n<p>Due to the fact that <code>require()</code> is a runtime operation, module source code\nis only lazily evaluated/loaded upon invoking the first require invocation,\nwhich might lead to situations where errors in module sources are only\nreported much later throughout the program execution. Unless runtime loading\nof modules is absolutely required, e.g. to conditionally load extensions, the\ncompile time\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import|<code>import</code> syntax}\nshould be preferred.</p>\n<p>Returns the module value (typically an object) on success.</p>\n<p>Throws an exception if the module function threw an exception.</p>\n<p>Throws an exception if no matching module could be found, if the module\ncontains syntax errors or upon other I/O related problems.</p>"},{"title":"module:core#reverse","link":"<a href=\"module-core.html#reverse\">reverse</a>","description":"<p>Reverse the order of the given input array or string.</p>\n<p>If an array is passed, returns the array in reverse order.\nIf a string is passed, returns the string with the sequence of the characters\nreversed.</p>\n<p>Returns the reversed array or string.\nReturns <code>null</code> if neither an array nor a string were passed.</p>"},{"title":"module:core#rindex","link":"<a href=\"module-core.html#rindex\">rindex</a>","description":"<p>Finds the given value passed as the second argument within the array or\nstring specified in the first argument.</p>\n<p>Returns the last matching array index or last matching string offset or\n<code>-1</code> if the value was not found.</p>\n<p>Returns <code>null</code> if the first argument was neither an array nor a string.</p>"},{"title":"module:core#rtrim","link":"<a href=\"module-core.html#rtrim\">rtrim</a>","description":"<p>Trim any of the specified characters from the end of the string.\nIf the second argument is omitted, trims the characters <code> </code> (space), '\\t',\n'\\r', and '\\n'.</p>\n<p>Returns the right trimmed string.</p>"},{"title":"module:core#shift","link":"<a href=\"module-core.html#shift\">shift</a>","description":"<p>Pops the first item from the given array and returns it.</p>\n<p>Returns <code>null</code> if the array was empty or if a non-array argument was passed.</p>"},{"title":"module:core#signal","link":"<a href=\"module-core.html#signal\">signal</a>","description":"<p>Set or query process signal handler function.</p>\n<p>When invoked with two arguments, a signal specification and a signal handler\nvalue, this function configures a new process signal handler.</p>\n<p>When invoked with one argument, a signal specification, this function returns\nthe currently configured handler for the given signal.</p>\n<p>The signal specification might either be an integer signal number or a string\nvalue containing a signal name (with or without &quot;SIG&quot; prefix). Signal names\nare treated case-insensitively.</p>\n<p>The signal handler might be either a callable function value or one of the\ntwo special string values <code>&quot;ignore&quot;</code> and <code>&quot;default&quot;</code>. Passing <code>&quot;ignore&quot;</code> will\nmask the given process signal while <code>&quot;default&quot;</code> will restore the operating\nsystems default behaviour for the given signal.</p>\n<p>In case a callable handler function is provided, it is invoked at the\nearliest  opportunity after receiving the corresponding signal from the\noperating system. The invoked function will receive a single argument, the\nnumber of the signal it is invoked for.</p>\n<p>Note that within the ucode VM, process signals are not immediately delivered,\ninstead the VM keeps track of received signals and delivers them to the ucode\nscript environment at the next opportunity, usually before executing the next\nbyte code instruction. This means that if a signal is received while\nperforming a computationally expensive operation in C mode, such as a complex\nregexp match, the corresponding ucode signal handler will only be invoked\nafter that operation concluded and control flow returns to the VM.</p>\n<p>Returns the signal handler function or one of the special values <code>&quot;ignore&quot;</code>\nor <code>&quot;default&quot;</code> corresponding to the given signal specification.</p>\n<p>Returns <code>null</code> if an invalid signal spec or signal handler was provided.</p>\n<p>Returns <code>null</code> if changing the signal action failed, e.g. due to insufficient\npermission, or when attempting to ignore a non-ignorable signal.</p>"},{"title":"module:core#sleep","link":"<a href=\"module-core.html#sleep\">sleep</a>","description":"<p>Pause execution for the given amount of milliseconds.</p>"},{"title":"module:core#slice","link":"<a href=\"module-core.html#slice\">slice</a>","description":"<p>Performs a shallow copy of a portion of the source array, as specified by\nthe start and end offsets. The original array is not modified.</p>\n<p>Returns a new array containing the copied elements, if any.\nReturns <code>null</code> if the given source argument is not an array value.</p>"},{"title":"module:core#sort","link":"<a href=\"module-core.html#sort\">sort</a>","description":"<p>Sort the given array according to the given sort function.\nIf no sort function is provided, a default ascending sort order is applied.</p>\n<p>The input array is sorted in-place, no copy is made.</p>\n<p>The custom sort function is repeatedly called until the entire array is\nsorted. It will receive two values as arguments and should return a value\nlower than, larger than or equal to zero depending on whether the first\nargument is smaller, larger or equal to the second argument respectively.</p>\n<p>Returns the sorted input array.</p>"},{"title":"module:core#sourcepath","link":"<a href=\"module-core.html#sourcepath\">sourcepath</a>","description":"<p>Determine the path of the source file currently being executed by ucode.</p>"},{"title":"module:core#splice","link":"<a href=\"module-core.html#splice\">splice</a>","description":"<p>Removes the elements designated by <code>off</code> and <code>len</code> from the given array,\nand replaces them with the additional arguments passed, if any.</p>\n<p>The array grows or shrinks as necessary.</p>\n<p>Returns the modified input array.</p>"},{"title":"module:core#split","link":"<a href=\"module-core.html#split\">split</a>","description":"<p>Split the given string using the separator passed as the second argument\nand return an array containing the resulting pieces.</p>\n<p>If a limit argument is supplied, the resulting array contains no more than\nthe given amount of entries, that means the string is split at most\n<code>limit - 1</code> times total.</p>\n<p>The separator may either be a plain string or a regular expression.</p>\n<p>Returns a new array containing the resulting pieces.</p>"},{"title":"module:core#sprintf","link":"<a href=\"module-core.html#sprintf\">sprintf</a>","description":"<p>Formats the given arguments according to the given format string.</p>\n<p>See <code>printf()</code> for details.</p>\n<p>Returns the formatted string.</p>"},{"title":"module:core#substr","link":"<a href=\"module-core.html#substr\">substr</a>","description":"<p>Extracts a substring out of <code>str</code> and returns it. First character is at\noffset zero.</p>\n<ul>\n<li>If <code>off</code> is negative, starts that far back from the end of the string.</li>\n<li>If <code>len</code> is omitted, returns everything through the end of the string.</li>\n<li>If <code>len</code> is negative, leaves that many characters off the string end.</li>\n</ul>\n<p>Returns the extracted substring.</p>"},{"title":"module:core#system","link":"<a href=\"module-core.html#system\">system</a>","description":"<p>Executes the given command, waits for completion, and returns the resulting\nexit code.</p>\n<p>The command argument may be either a string, in which case it is passed to\n<code>/bin/sh -c</code>, or an array, which is directly converted into an <code>execv()</code>\nargument vector.</p>\n<ul>\n<li>If the program terminated normally, a positive integer holding the\nprogram's <code>exit()</code> code is returned.</li>\n<li>If the program was terminated by an uncaught signal, a negative signal\nnumber is returned.</li>\n<li>If the optional timeout argument is specified, the program is terminated\nby <code>SIGKILL</code> after that many milliseconds if it doesn't complete within\nthe timeout.</li>\n</ul>\n<p>Omitting the timeout argument or passing <code>0</code> disables the command timeout.</p>\n<p>Returns the program exit code.</p>"},{"title":"module:core#time","link":"<a href=\"module-core.html#time\">time</a>","description":"<p>Returns the current UNIX epoch.</p>"},{"title":"module:core#timegm","link":"<a href=\"module-core.html#timegm\">timegm</a>","description":"<p>Like <code>timelocal()</code> but interpreting the given date time specification as UTC\ntime.</p>\n<p>See {@link module:core#timelocal|timelocal()} for details.</p>"},{"title":"module:core#timelocal","link":"<a href=\"module-core.html#timelocal\">timelocal</a>","description":"<p>Performs the inverse operation of {@link module:core#localtime|localtime()}\nby taking a broken-down date and time dictionary and transforming it into an\nepoch value according to the local system timezone.</p>\n<p>The <code>wday</code> and <code>yday</code> fields of the given date time specification are\nignored. Field values outside of their valid range are internally normalized,\ne.g. October 40th is interpreted as November 9th.</p>\n<p>Returns the resulting epoch value or null if the input date time dictionary\nwas invalid or if the date time specification cannot be represented as epoch\nvalue.</p>"},{"title":"module:core#trace","link":"<a href=\"module-core.html#trace\">trace</a>","description":"<p>Enables or disables VM opcode tracing.</p>\n<p>When invoked with a positive non-zero level, opcode tracing is enabled and\ndebug information is printed to stderr as the program is executed.</p>\n<p>Invoking <code>trace()</code> with zero as an argument turns off opcode tracing.</p>"},{"title":"module:core#trim","link":"<a href=\"module-core.html#trim\">trim</a>","description":"<p>Trim any of the specified characters in <code>c</code> from the start and end of <code>str</code>.\nIf the second argument is omitted, trims the characters, <code> </code> (space), <code>\\t</code>,\n<code>\\r</code>, and <code>\\n</code>.</p>\n<p>Returns the trimmed string.</p>"},{"title":"module:core#type","link":"<a href=\"module-core.html#type\">type</a>","description":"<p>Query the type of the given value.</p>\n<p>Returns the type of the given value as a string which might be one of\n<code>&quot;function&quot;</code>, <code>&quot;object&quot;</code>, <code>&quot;array&quot;</code>, <code>&quot;double&quot;</code>, <code>&quot;int&quot;</code>, or <code>&quot;bool&quot;</code>.</p>\n<p>Returns <code>null</code> when no value or <code>null</code> is passed.</p>"},{"title":"module:core#uc","link":"<a href=\"module-core.html#uc\">uc</a>","description":"<p>Converts the given string to uppercase and returns the resulting string.</p>\n<p>Returns null if the given argument could not be converted to a string.</p>"},{"title":"module:core#uchr","link":"<a href=\"module-core.html#uchr\">uchr</a>","description":"<p>Converts each given numeric value to an UTF-8 multibyte sequence and returns\nthe resulting string.</p>\n<p>Invalid numeric values or values outside the range <code>0</code>..<code>0x10FFFF</code> are\nrepresented by the unicode replacement character <code>0xFFFD</code>.</p>\n<p>Returns a new UTF-8 encoded string consisting of unicode characters\ncorresponding to the given numeric codepoints.</p>"},{"title":"module:core#uniq","link":"<a href=\"module-core.html#uniq\">uniq</a>","description":"<p>Returns a new array containing all unique values of the given input array.</p>\n<ul>\n<li>The order is preserved, and subsequent duplicate values are skipped.</li>\n<li>If a non-array argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#unshift","link":"<a href=\"module-core.html#unshift\">unshift</a>","description":"<p>Add the given values to the beginning of the array passed via first argument.</p>\n<p>Returns the last value added to the array.</p>"},{"title":"module:core#values","link":"<a href=\"module-core.html#values\">values</a>","description":"<p>Returns an array containing all values of the given object.</p>\n<p>Returns null if no object was passed.</p>"},{"title":"module:core#warn","link":"<a href=\"module-core.html#warn\">warn</a>","description":"<p>Print any of the given values to stderr. Arrays and objects are converted to\ntheir JSON representation.</p>\n<p>Returns the amount of bytes printed.</p>"},{"title":"module:core#wildcard","link":"<a href=\"module-core.html#wildcard\">wildcard</a>","description":"<p>Match the given subject against the supplied wildcard (file glob) pattern.</p>\n<ul>\n<li>If a truthy value is supplied as the third argument, case-insensitive\nmatching is performed.</li>\n<li>If a non-string value is supplied as the subject, it is converted into a\nstring before being matched.</li>\n</ul>\n<p>Returns <code>true</code> when the value matched the given pattern, otherwise <code>false</code>.</p>"},{"title":"module:core.ParseConfig","link":"<a href=\"module-core.html#.ParseConfig\">ParseConfig</a>","description":"<p>A parse configuration is a plain object describing options to use when\ncompiling ucode at runtime. It is expected as parameter by the\n{@link module:core#loadfile|loadfile()} and\n{@link module:core#loadstring|loadstring()} functions.</p>\n<p>All members of the parse configuration object are optional and will default\nto the state of the running ucode file if omitted.</p>"},{"title":"module:core.TimeSpec","link":"<a href=\"module-core.html#.TimeSpec\">TimeSpec</a>","description":"<p>A time spec is a plain object describing a point in time, it is returned by\nthe {@link module:core#gmtime|gmtime()} and\n{@link module:core#localtime|localtime()} functions and expected as parameter\nby the complementary {@link module:core#timegm|timegm()} and\n{@link module:core#timelocal|timelocal()} functions.</p>\n<p>When returned by <code>gmtime()</code> or <code>localtime()</code>, all members of the object will\nbe initialized, when passed as argument to <code>timegm()</code> or <code>timelocal()</code>, most\nmember values are optional.</p>"},{"title":"module:debug","link":"<a href=\"module-debug.html\">debug</a>","description":"<h1 id=\"debugger-module\">Debugger Module</h1>\n<p>This module provides runtime debug functionality for ucode scripts.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { memdump, traceback } from 'debug';\n\nlet stacktrace = traceback(1);\n\nmemdump(&quot;/tmp/dump.txt&quot;);\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as debug from 'debug';\n\nlet stacktrace = debug.traceback(1);\n\ndebug.memdump(&quot;/tmp/dump.txt&quot;);\n</code></pre>\n<p>Additionally, the debug module namespace may also be imported by invoking the\n<code>ucode</code> interpreter with the <code>-ldebug</code> switch.</p>\n<p>Upon loading, the <code>debug</code> module will register a <code>SIGUSR2</code> signal handler\nwhich, upon receipt of the signal, will write a memory dump of the currently\nrunning program to <code>/tmp/ucode.$timestamp.$pid.memdump</code>. This default\nbehavior can be inhibited by setting the <code>UCODE_DEBUG_MEMDUMP_ENABLED</code>\nenvironment variable to <code>0</code> when starting the process. The memory dump signal\nand output directory can be overridden with the <code>UCODE_DEBUG_MEMDUMP_SIGNAL</code>\nand <code>UCODE_DEBUG_MEMDUMP_PATH</code> environment variables respectively.</p>"},{"title":"module:debug#getinfo","link":"<a href=\"module-debug.html#getinfo\">getinfo</a>","description":"<p>Obtain information about the given value.</p>\n<p>The <code>getinfo()</code> function allows querying internal information about the\ngiven ucode value, such as the current reference count, the mark bit state\netc.</p>\n<p>Returns a dictionary with value type specific details.</p>\n<p>Returns <code>null</code> if a <code>null</code> value was provided.</p>"},{"title":"module:debug#getlocal","link":"<a href=\"module-debug.html#getlocal\">getlocal</a>","description":"<p>Obtain local variable.</p>\n<p>The <code>getlocal()</code> function retrieves information about the specified local\nvariable at the given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up local variables should\nbe queried. A value of <code>0</code> refers to this <code>getlocal()</code> function call itself,\n<code>1</code> to the function calling <code>getlocal()</code> and so on.</p>\n<p>The variable to query might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the given variable.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is a C call.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#getupval","link":"<a href=\"module-debug.html#getupval\">getupval</a>","description":"<p>Obtain captured variable (upvalue).</p>\n<p>The <code>getupval()</code> function retrieves information about the specified captured\nvariable associated with the given function value or the invoked function at\nthe given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up the function should be\nselected to query associated captured variables for. A value of <code>0</code> refers to\nthis <code>getupval()</code> function call itself, <code>1</code> to the function calling\n<code>getupval()</code> and so on.</p>\n<p>The variable to query might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the given variable.</p>\n<p>Returns <code>null</code> if the given function value is not a closure.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is not a closure.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#memdump","link":"<a href=\"module-debug.html#memdump\">memdump</a>","description":"<p>Write a memory dump report to the given file.</p>\n<p>This function generates a human readable memory dump of ucode values\ncurrently managed by the running VM which is useful to track down logical\nmemory leaks in scripts.</p>\n<p>The file parameter can be either a string value containing a file path, in\nwhich case this function tries to create and write the report file at the\ngiven location, or an already open file handle this function should write to.</p>\n<p>Returns <code>true</code> if the report has been written.</p>\n<p>Returns <code>null</code> if the file could not be opened or if the handle was invalid.</p>"},{"title":"module:debug#setlocal","link":"<a href=\"module-debug.html#setlocal\">setlocal</a>","description":"<p>Set local variable.</p>\n<p>The <code>setlocal()</code> function manipulates the value of the specified local\nvariable at the given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up local variables should\nbe updated. A value of <code>0</code> refers to this <code>setlocal()</code> function call itself,\n<code>1</code> to the function calling <code>setlocal()</code> and so on.</p>\n<p>The variable to update might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the updated variable.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is a C call.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#setupval","link":"<a href=\"module-debug.html#setupval\">setupval</a>","description":"<p>Set upvalue.</p>\n<p>The <code>setupval()</code> function manipulates the value of the specified captured\nvariable associated with the given function value or the invoked function at\nthe given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up the function should be\nselected to update associated captured variables for. A value of <code>0</code> refers\nto this <code>setupval()</code> function call itself, <code>1</code> to the function calling\n<code>setupval()</code> and so on.</p>\n<p>The variable to update might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the updated variable.</p>\n<p>Returns <code>null</code> if the given function value is not a closure.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is not a closure.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#sourcepos","link":"<a href=\"module-debug.html#sourcepos\">sourcepos</a>","description":"<p>Obtain information about the current source position.</p>\n<p>The <code>sourcepos()</code> function determines the source code position of the\ncurrent instruction invoking this function.</p>\n<p>Returns a dictionary containing the filename, line number and line byte\noffset of the call site.</p>\n<p>Returns <code>null</code> if this function was invoked from C code.</p>"},{"title":"module:debug#traceback","link":"<a href=\"module-debug.html#traceback\">traceback</a>","description":"<p>Capture call stack trace.</p>\n<p>This function captures the current call stack and returns it. The optional\nlevel parameter controls how many calls up the trace should start. It\ndefaults to <code>1</code>, that is the function calling this <code>traceback()</code> function.</p>\n<p>Returns an array of stack trace entries describing the function invocations\nup to the point where <code>traceback()</code> is called.</p>"},{"title":"module:debug.LocalInfo","link":"<a href=\"module-debug.html#.LocalInfo\">LocalInfo</a>"},{"title":"module:debug.SourcePosition","link":"<a href=\"module-debug.html#.SourcePosition\">SourcePosition</a>"},{"title":"module:debug.StackTraceEntry","link":"<a href=\"module-debug.html#.StackTraceEntry\">StackTraceEntry</a>"},{"title":"module:debug.UpvalInfo","link":"<a href=\"module-debug.html#.UpvalInfo\">UpvalInfo</a>"},{"title":"module:debug.UpvalRef","link":"<a href=\"module-debug.html#.UpvalRef\">UpvalRef</a>"},{"title":"module:debug.ValueInformation","link":"<a href=\"module-debug.html#.ValueInformation\">ValueInformation</a>"},{"title":"module:digest","link":"<a href=\"module-digest.html\">digest</a>","description":"<h1 id=\"digest-functions\">Digest Functions</h1>\n<p>The <code>digest</code> module bundles various digest functions.</p>"},{"title":"module:digest#md2","link":"<a href=\"module-digest.html#md2\">md2</a>","description":"<p>Calculates the MD2 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#md2_file","link":"<a href=\"module-digest.html#md2_file\">md2_file</a>","description":"<p>Calculates the MD2 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#md4","link":"<a href=\"module-digest.html#md4\">md4</a>","description":"<p>Calculates the MD4 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#md4_file","link":"<a href=\"module-digest.html#md4_file\">md4_file</a>","description":"<p>Calculates the MD4 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#md5","link":"<a href=\"module-digest.html#md5\">md5</a>","description":"<p>Calculates the MD5 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#md5_file","link":"<a href=\"module-digest.html#md5_file\">md5_file</a>","description":"<p>Calculates the MD5 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#sha1","link":"<a href=\"module-digest.html#sha1\">sha1</a>","description":"<p>Calculates the SHA1 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#sha1_file","link":"<a href=\"module-digest.html#sha1_file\">sha1_file</a>","description":"<p>Calculates the SHA1 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#sha256","link":"<a href=\"module-digest.html#sha256\">sha256</a>","description":"<p>Calculates the SHA256 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#sha256_file","link":"<a href=\"module-digest.html#sha256_file\">sha256_file</a>","description":"<p>Calculates the SHA256 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#sha384","link":"<a href=\"module-digest.html#sha384\">sha384</a>","description":"<p>Calculates the SHA384 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#sha384","link":"<a href=\"module-digest.html#sha384\">sha384</a>","description":"<p>Calculates the SHA384 hash of string and returns that hash.</p>\n<p>Returns <code>null</code> if a non-string argument is given.</p>"},{"title":"module:digest#sha384_file","link":"<a href=\"module-digest.html#sha384_file\">sha384_file</a>","description":"<p>Calculates the SHA384 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:digest#sha512_file","link":"<a href=\"module-digest.html#sha512_file\">sha512_file</a>","description":"<p>Calculates the SHA512 hash of a given file and returns that hash.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs","link":"<a href=\"module-fs.html\">fs</a>","description":"<h1 id=\"filesystem-access\">Filesystem Access</h1>\n<p>The <code>fs</code> module provides functions for interacting with the file system.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { readlink, popen } from 'fs';\n\nlet dest = readlink('/sys/class/net/eth0');\nlet proc = popen('ps ww');\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as fs from 'fs';\n\nlet dest = fs.readlink('/sys/class/net/eth0');\nlet proc = fs.popen('ps ww');\n</code></pre>\n<p>Additionally, the filesystem module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-lfs</code> switch.</p>"},{"title":"module:fs#access","link":"<a href=\"module-fs.html#access\">access</a>","description":"<p>Checks the accessibility of a file or directory.</p>\n<p>The optional modes argument specifies the access modes which should be\nchecked. A file is only considered accessible if all access modes specified\nin the modes argument are possible.</p>\n<p>The following modes are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Tests whether the file is readable.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Tests whether the file is writable.</td>\n</tr>\n<tr>\n<td>&quot;x&quot;</td>\n<td>Tests whether the file is executable.</td>\n</tr>\n<tr>\n<td>&quot;f&quot;</td>\n<td>Tests whether the file exists.</td>\n</tr>\n</tbody>\n</table>\n<p>Returns <code>true</code> if the given path is accessible or <code>false</code> when it is not.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inaccessible intermediate\npath components, invalid path arguments etc.</p>"},{"title":"module:fs#basename","link":"<a href=\"module-fs.html#basename\">basename</a>","description":"<p>Retrieves the base name of a path.</p>\n<p>Returns the base name component of the specified path.</p>\n<p>Returns <code>null</code> if the path argument is not a string.</p>"},{"title":"module:fs#chdir","link":"<a href=\"module-fs.html#chdir\">chdir</a>","description":"<p>Changes the current working directory to the specified path.</p>\n<p>Returns <code>true</code> if the permission change was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions or\ninvalid arguments.</p>"},{"title":"module:fs#chmod","link":"<a href=\"module-fs.html#chmod\">chmod</a>","description":"<p>Changes the permission mode bits of a file or directory.</p>\n<p>Returns <code>true</code> if the permission change was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions or\ninvalid arguments.</p>"},{"title":"module:fs#chown","link":"<a href=\"module-fs.html#chown\">chown</a>","description":"<p>Changes the owner and group of a file or directory.</p>\n<p>The user and group may be specified either as uid or gid number respectively,\nor as a string containing the user or group name, in which case it is\nresolved to the proper uid/gid first.</p>\n<p>If either the user or group parameter is omitted or given as <code>-1</code>,\nit is not changed.</p>\n<p>Returns <code>true</code> if the ownership change was successful.</p>\n<p>Returns <code>null</code> if an error occurred or if a user/group name cannot be\nresolved to a uid/gid value.</p>"},{"title":"module:fs#dirname","link":"<a href=\"module-fs.html#dirname\">dirname</a>","description":"<p>Retrieves the directory name of a path.</p>\n<p>Returns the directory name component of the specified path.</p>\n<p>Returns <code>null</code> if the path argument is not a string.</p>"},{"title":"module:fs#error","link":"<a href=\"module-fs.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs#fdopen","link":"<a href=\"module-fs.html#fdopen\">fdopen</a>","description":"<p>Associates a file descriptor number with a file handle object.</p>\n<p>The mode argument controls how the file handle object is opened\nand must match the open mode of the underlying descriptor.</p>\n<p>It may be set to one of the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Opens a file stream for reading. The file descriptor must be valid and opened in read mode.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Opens a file stream for writing. The file descriptor must be valid and opened in write mode.</td>\n</tr>\n<tr>\n<td>&quot;a&quot;</td>\n<td>Opens a file stream for appending. The file descriptor must be valid and opened in write mode.</td>\n</tr>\n<tr>\n<td>&quot;r+&quot;</td>\n<td>Opens a file stream for both reading and writing. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n<tr>\n<td>&quot;w+&quot;</td>\n<td>Opens a file stream for both reading and writing. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n<tr>\n<td>&quot;a+&quot;</td>\n<td>Opens a file stream for both reading and appending. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the file handle object associated with the file descriptor.</p>"},{"title":"module:fs#getcwd","link":"<a href=\"module-fs.html#getcwd\">getcwd</a>","description":"<p>Retrieves the current working directory.</p>\n<p>Returns a string containing the current working directory path.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#lsdir","link":"<a href=\"module-fs.html#lsdir\">lsdir</a>","description":"<p>Lists the content of a directory.</p>\n<p>Returns a sorted array of the names of files and directories in the specified\ndirectory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. if the specified directory cannot\nbe opened.</p>"},{"title":"module:fs#lstat","link":"<a href=\"module-fs.html#lstat\">lstat</a>","description":"<p>Retrieves information about a file or directory, without following symbolic\nlinks.</p>\n<p>Returns an object containing information about the file or directory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#mkdir","link":"<a href=\"module-fs.html#mkdir\">mkdir</a>","description":"<p>Creates a new directory.</p>\n<p>Returns <code>true</code> if the directory was successfully created.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#mkstemp","link":"<a href=\"module-fs.html#mkstemp\">mkstemp</a>","description":"<p>Creates a unique, ephemeral temporary file.</p>\n<p>Creates a new temporary file, opens it in read and write mode, unlinks it and\nreturns a file handle object referring to the yet open but deleted file.</p>\n<p>Upon closing the handle, the associated file will automatically vanish from\nthe system.</p>\n<p>The optional path template argument may be used to override the path and name\nchosen for the temporary file. If the path template contains no path element,\n<code>/tmp/</code> is prepended, if it does not end with <code>XXXXXX</code>, then  * <code>.XXXXXX</code> is\nappended to it. The <code>XXXXXX</code> sequence is replaced with a random value\nensuring uniqueness of the temporary file name.</p>\n<p>Returns a file handle object referring to the ephemeral file on success.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. on insufficient permissions or\ninaccessible directory.</p>"},{"title":"module:fs#open","link":"<a href=\"module-fs.html#open\">open</a>","description":"<p>Opens a file.</p>\n<p>The mode argument specifies the way the file is opened, it may\nstart with one of the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Opens a file for reading. The file must exist.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Opens a file for writing. If the file exists, it is truncated. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;a&quot;</td>\n<td>Opens a file for appending. Data is written at the end of the file. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;r+&quot;</td>\n<td>Opens a file for both reading and writing. The file must exist.</td>\n</tr>\n<tr>\n<td>&quot;w+&quot;</td>\n<td>Opens a file for both reading and writing. If the file exists, it is truncated. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;a+&quot;</td>\n<td>Opens a file for both reading and appending. Data can be read and written at the end of the file. If the file does not exist, it is created.</td>\n</tr>\n</tbody>\n</table>\n<p>Additionally, the following flag characters may be appended to\nthe mode value:</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;x&quot;</td>\n<td>Opens a file for exclusive creation. If the file exists, the <code>open</code> call fails.</td>\n</tr>\n<tr>\n<td>&quot;e&quot;</td>\n<td>Opens a file with the <code>O_CLOEXEC</code> flag set, ensuring that the file descriptor is closed on <code>exec</code> calls.</td>\n</tr>\n</tbody>\n</table>\n<p>If the mode is one of <code>&quot;w…&quot;</code> or <code>&quot;a…&quot;</code>, the permission argument\ncontrols the filesystem permissions bits used when creating\nthe file.</p>\n<p>Returns a file handle object associated with the opened file.</p>"},{"title":"module:fs#opendir","link":"<a href=\"module-fs.html#opendir\">opendir</a>","description":"<p>Opens a directory and returns a directory handle associated with the open\ndirectory descriptor.</p>\n<p>Returns a director handle referring to the open directory.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#pipe","link":"<a href=\"module-fs.html#pipe\">pipe</a>","description":"<p>Creates a pipe and returns file handle objects associated with the read- and\nwrite end of the pipe respectively.</p>\n<p>Returns a two element array containing both a file handle object open in read\nmode referring to the read end of the pipe and a file handle object open in\nwrite mode referring to the write end of the pipe.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#popen","link":"<a href=\"module-fs.html#popen\">popen</a>","description":"<p>Starts a process and returns a handle representing the executed process.</p>\n<p>The handle will be connected to the process stdin or stdout, depending on the\nvalue of the mode argument.</p>\n<p>The mode argument may be either &quot;r&quot; to open the process for reading (connect\nto its stdin) or &quot;w&quot; to open the process for writing (connect to its stdout).</p>\n<p>The mode character &quot;r&quot; or &quot;w&quot; may be optionally followed by &quot;e&quot; to apply the\nFD_CLOEXEC flag onto the open descriptor.</p>\n<p>Returns a process handle referring to the executed process.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#readfile","link":"<a href=\"module-fs.html#readfile\">readfile</a>","description":"<p>Reads the content of a file, optionally limited to the given amount of bytes.</p>\n<p>Returns a string containing the file contents.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#readlink","link":"<a href=\"module-fs.html#readlink\">readlink</a>","description":"<p>Reads the target path of a symbolic link.</p>\n<p>Returns a string containing the target path.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#realpath","link":"<a href=\"module-fs.html#realpath\">realpath</a>","description":"<p>Resolves the absolute path of a file or directory.</p>\n<p>Returns a string containing the resolved path.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#rename","link":"<a href=\"module-fs.html#rename\">rename</a>","description":"<p>Renames or moves a file or directory.</p>\n<p>Returns <code>true</code> if the rename operation was successful.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#rmdir","link":"<a href=\"module-fs.html#rmdir\">rmdir</a>","description":"<p>Removes the specified directory.</p>\n<p>Returns <code>true</code> if the directory was successfully removed.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#stat","link":"<a href=\"module-fs.html#stat\">stat</a>","description":"<p>Retrieves information about a file or directory.</p>\n<p>Returns an object containing information about the file or directory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#symlink","link":"<a href=\"module-fs.html#symlink\">symlink</a>","description":"<p>Creates a new symbolic link.</p>\n<p>Returns <code>true</code> if the symlink was successfully created.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#unlink","link":"<a href=\"module-fs.html#unlink\">unlink</a>","description":"<p>Removes the specified file or symbolic link.</p>\n<p>Returns <code>true</code> if the unlink operation was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#writefile","link":"<a href=\"module-fs.html#writefile\">writefile</a>","description":"<p>Writes the given data to a file, optionally truncated to the given amount\nof bytes.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written into the file. String values are written as-is, integer and\ndouble values are written in decimal notation, boolean values are written as\n<code>true</code> or <code>false</code> while arrays and objects are converted to their JSON\nrepresentation before being written into the file. The <code>null</code> value is\nrepresented by an empty string so <code>writefile(…, null)</code> would write an empty\nfile. Resource values are written in the form <code>&lt;type address&gt;</code>, e.g.\n<code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>If a file already exists at the given path, it is truncated. If no file\nexists, it is created with default permissions 0o666 masked by the currently\neffective umask.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs.FileStatResult","link":"<a href=\"module-fs.html#.FileStatResult\">FileStatResult</a>"},{"title":"module:fs.dir","link":"<a href=\"module-fs.dir.html\">dir</a>","description":"<p>Represents a handle for interacting with a directory opened by <code>opendir()</code>.</p>"},{"title":"module:fs.dir#close","link":"<a href=\"module-fs.dir.html#close\">close</a>","description":"<p>Closes the directory handle.</p>\n<p>Closes the underlying file descriptor referring to the opened directory.</p>\n<p>Returns <code>true</code> if the handle was properly closed.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#error","link":"<a href=\"module-fs.dir.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.dir#read","link":"<a href=\"module-fs.dir.html#read\">read</a>","description":"<p>Read the next entry from the open directory.</p>\n<p>Returns a string containing the entry name.</p>\n<p>Returns <code>null</code> if there are no more entries to read.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#seek","link":"<a href=\"module-fs.dir.html#seek\">seek</a>","description":"<p>Set read position.</p>\n<p>Sets the read position within the open directory handle to the given offset\nvalue. The offset value should be obtained by a previous call to <code>tell()</code> as\nthe specific integer values are implementation defined.</p>\n<p>Returns <code>true</code> if the read position was set.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#tell","link":"<a href=\"module-fs.dir.html#tell\">tell</a>","description":"<p>Obtain current read position.</p>\n<p>Returns the current read position in the open directory handle which can be\npassed back to the <code>seek()</code> function to return to this position. This is\nmainly useful to read an open directory handle (or specific items) multiple\ntimes.</p>\n<p>Returns an integer referring to the current position.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file","link":"<a href=\"module-fs.file.html\">file</a>","description":"<p>Represents a handle for interacting with a file opened by one of the file\nopen functions.</p>"},{"title":"module:fs.file#close","link":"<a href=\"module-fs.file.html#close\">close</a>","description":"<p>Closes the file handle.</p>\n<p>Upon calling <code>close()</code> on the handle, buffered data is flushed and the\nunderlying file descriptor is closed.</p>\n<p>Returns <code>true</code> if the handle was properly closed.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#error","link":"<a href=\"module-fs.file.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.file#fileno","link":"<a href=\"module-fs.file.html#fileno\">fileno</a>","description":"<p>Obtains the number of the handle's underlying file descriptor.</p>\n<p>Returns the descriptor number.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#flush","link":"<a href=\"module-fs.file.html#flush\">flush</a>","description":"<p>Forces a write of all buffered data to the underlying handle.</p>\n<p>Returns <code>true</code> if the data was successfully flushed.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#ioctl","link":"<a href=\"module-fs.file.html#ioctl\">ioctl</a>","description":"<p>Performs an ioctl operation on the file.</p>\n<p>The direction parameter specifies who is reading and writing,\nfrom the user's point of view. It can be one of the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Direction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IOC_DIR_NONE</td>\n<td>neither userspace nor kernel is writing, ioctl is executed without passing data.</td>\n</tr>\n<tr>\n<td>IOC_DIR_WRITE</td>\n<td>userspace is writing and kernel is reading.</td>\n</tr>\n<tr>\n<td>IOC_DIR_READ</td>\n<td>kernel is writing and userspace is reading.</td>\n</tr>\n<tr>\n<td>IOC_DIR_RW</td>\n<td>userspace is writing and kernel is writing back into the data structure.</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the result of the ioctl operation; for <code>IOC_DIR_READ</code> and\n<code>IOC_DIR_RW</code> this is a string containing the data, otherwise a number as\nreturn code.</p>\n<p>In case of an error, null is returned and error details are available via\n{@link module:fs#error|error()}.</p>"},{"title":"module:fs.file#isatty","link":"<a href=\"module-fs.file.html#isatty\">isatty</a>","description":"<p>Check for TTY.</p>\n<p>Checks whether the open file handle refers to a TTY (terminal) device.</p>\n<p>Returns <code>true</code> if the handle refers to a terminal.</p>\n<p>Returns <code>false</code> if the handle refers to another kind of file.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#lock","link":"<a href=\"module-fs.file.html#lock\">lock</a>","description":"<p>Locks or unlocks a file.</p>\n<p>The mode argument specifies lock/unlock operation flags.</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;s&quot;</td>\n<td>shared lock</td>\n</tr>\n<tr>\n<td>&quot;x&quot;</td>\n<td>exclusive lock</td>\n</tr>\n<tr>\n<td>&quot;n&quot;</td>\n<td>don't block when locking</td>\n</tr>\n<tr>\n<td>&quot;u&quot;</td>\n<td>unlock</td>\n</tr>\n</tbody>\n</table>\n<p>Returns <code>true</code> if the file was successfully locked/unlocked.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#read","link":"<a href=\"module-fs.file.html#read\">read</a>","description":"<p>Reads a chunk of data from the file handle.</p>\n<p>The length argument may be either a positive number of bytes to read, in\nwhich case the read call returns up to that many bytes, or a string to\nspecify a dynamic read size.</p>\n<ul>\n<li>\n<p>If length is a number, the method will read the specified number of bytes\nfrom the handle. Reading stops after the given amount of bytes or after\nencountering EOF, whatever comes first.</p>\n</li>\n<li>\n<p>If length is the string &quot;line&quot;, the method will read an entire line,\nterminated by &quot;\\n&quot; (a newline), from the handle. Reading stops at the next\nnewline or when encountering EOF. The returned data will contain the\nterminating newline character if one was read.</p>\n</li>\n<li>\n<p>If length is the string &quot;all&quot;, the method will read from the handle until\nencountering EOF and return the complete contents.</p>\n</li>\n<li>\n<p>If length is a single character string, the method will read from the\nhandle until encountering the specified character or upon encountering\nEOF. The returned data will contain the terminating character if one was\nread.</p>\n</li>\n</ul>\n<p>Returns a string containing the read data.</p>\n<p>Returns an empty string on EOF.</p>\n<p>Returns <code>null</code> if a read error occurred.</p>"},{"title":"module:fs.file#seek","link":"<a href=\"module-fs.file.html#seek\">seek</a>","description":"<p>Set file read position.</p>\n<p>Set the read position of the open file handle to the given offset and\nposition.</p>\n<p>Returns <code>true</code> if the read position was set.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#tell","link":"<a href=\"module-fs.file.html#tell\">tell</a>","description":"<p>Obtain current read position.</p>\n<p>Obtains the current, absolute read position of the open file.</p>\n<p>Returns an integer containing the current read offset in bytes.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#truncate","link":"<a href=\"module-fs.file.html#truncate\">truncate</a>","description":"<p>Truncate file to a given size</p>\n<p>Returns <code>true</code> if the file was successfully truncated.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#write","link":"<a href=\"module-fs.file.html#write\">write</a>","description":"<p>Writes a chunk of data to the file handle.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written into the file. String values are written as-is, integer and\ndouble values are written in decimal notation, boolean values are written as\n<code>true</code> or <code>false</code> while arrays and objects are converted to their JSON\nrepresentation before being written. The <code>null</code> value is represented by an\nempty string so <code>file.write(null)</code> would be a no-op. Resource values are\nwritten in the form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if a write error occurred.</p>"},{"title":"module:fs.proc","link":"<a href=\"module-fs.proc.html\">proc</a>","description":"<p>Represents a handle for interacting with a program launched by <code>popen()</code>.</p>"},{"title":"module:fs.proc#close","link":"<a href=\"module-fs.proc.html#close\">close</a>","description":"<p>Closes the program handle and awaits program termination.</p>\n<p>Upon calling <code>close()</code> on the handle, the program's input or output stream\n(depending on the open mode) is closed. Afterwards, the function awaits the\ntermination of the underlying program and returns its exit code.</p>\n<ul>\n<li>\n<p>When the program was terminated by a signal, the return value will be the\nnegative signal number, e.g. <code>-9</code> for SIGKILL.</p>\n</li>\n<li>\n<p>When the program terminated normally, the return value will be the positive\nexit code of the program.</p>\n</li>\n</ul>\n<p>Returns a negative signal number if the program was terminated by a signal.</p>\n<p>Returns a positive exit code if the program terminated normally.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.proc#error","link":"<a href=\"module-fs.proc.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.proc#fileno","link":"<a href=\"module-fs.proc.html#fileno\">fileno</a>","description":"<p>Obtains the number of the handle's underlying file descriptor.</p>\n<p>Returns the descriptor number.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.proc#flush","link":"<a href=\"module-fs.proc.html#flush\">flush</a>","description":"<p>Forces a write of all buffered data to the underlying handle.</p>\n<p>Returns <code>true</code> if the data was successfully flushed.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.proc#read","link":"<a href=\"module-fs.proc.html#read\">read</a>","description":"<p>Reads a chunk of data from the program handle.</p>\n<p>The length argument may be either a positive number of bytes to read, in\nwhich case the read call returns up to that many bytes, or a string to\nspecify a dynamic read size.</p>\n<ul>\n<li>\n<p>If length is a number, the method will read the specified number of bytes\nfrom the handle. Reading stops after the given amount of bytes or after\nencountering EOF, whatever comes first.</p>\n</li>\n<li>\n<p>If length is the string &quot;line&quot;, the method will read an entire line,\nterminated by &quot;\\n&quot; (a newline), from the handle. Reading stops at the next\nnewline or when encountering EOF. The returned data will contain the\nterminating newline character if one was read.</p>\n</li>\n<li>\n<p>If length is the string &quot;all&quot;, the method will read from the handle until\nencountering EOF and return the complete contents.</p>\n</li>\n<li>\n<p>If length is a single character string, the method will read from the\nhandle until encountering the specified character or upon encountering\nEOF. The returned data will contain the terminating character if one was\nread.</p>\n</li>\n</ul>\n<p>Returns a string containing the read data.</p>\n<p>Returns an empty string on EOF.</p>\n<p>Returns <code>null</code> if a read error occurred.</p>"},{"title":"module:fs.proc#write","link":"<a href=\"module-fs.proc.html#write\">write</a>","description":"<p>Writes a chunk of data to the program handle.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written to the program's stdin. String values are written as-is,\ninteger and double values are written in decimal notation, boolean values are\nwritten as <code>true</code> or <code>false</code> while arrays and objects are converted to their\nJSON representation before being written. The <code>null</code> value is represented by\nan empty string so <code>proc.write(null)</code> would be a no-op. Resource values are\nwritten in the form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if a write error occurred.</p>"},{"title":"module:log","link":"<a href=\"module-log.html\">log</a>","description":"<h1 id=\"system-logging-functions\">System logging functions</h1>\n<p>The <code>log</code> module provides bindings to the POSIX syslog functions <code>openlog()</code>,\n<code>syslog()</code> and <code>closelog()</code> as well as - when available - the OpenWrt\nspecific ulog library functions.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { openlog, syslog, LOG_PID, LOG_USER, LOG_ERR } from 'log';\n\nopenlog(&quot;my-log-ident&quot;, LOG_PID, LOG_USER);\nsyslog(LOG_ERR, &quot;An error occurred!&quot;);\n\n// OpenWrt specific ulog functions\nimport { ulog_open, ulog, ULOG_SYSLOG, LOG_DAEMON, LOG_INFO } from 'log';\n\nulog_open(ULOG_SYSLOG, LOG_DAEMON, &quot;my-log-ident&quot;);\nulog(LOG_INFO, &quot;The current epoch is %d&quot;, time());\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as log from 'log';\n\nlog.openlog(&quot;my-log-ident&quot;, log.LOG_PID, log.LOG_USER);\nlog.syslog(log.LOG_ERR, &quot;An error occurred!&quot;);\n\n// OpenWrt specific ulog functions\nlog.ulog_open(log.ULOG_SYSLOG, log.LOG_DAEMON, &quot;my-log-ident&quot;);\nlog.ulog(log.LOG_INFO, &quot;The current epoch is %d&quot;, time());\n</code></pre>\n<p>Additionally, the log module namespace may also be imported by invoking the\n<code>ucode</code> interpreter with the <code>-llog</code> switch.</p>\n<h2 id=\"constants\">Constants</h2>\n<p>The <code>log</code> module declares a number of numeric constants to specify logging\nfacility, priority and option values, as well as ulog specific channels.</p>\n<h3 id=\"syslog-options\">Syslog Options</h3>\n<table>\n<thead>\n<tr>\n<th>Constant Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LOG_PID</code></td>\n<td>Include PID with each message.</td>\n</tr>\n<tr>\n<td><code>LOG_CONS</code></td>\n<td>Log to console if error occurs while sending to syslog.</td>\n</tr>\n<tr>\n<td><code>LOG_NDELAY</code></td>\n<td>Open the connection to the logger immediately.</td>\n</tr>\n<tr>\n<td><code>LOG_ODELAY</code></td>\n<td>Delay open until the first message is logged.</td>\n</tr>\n<tr>\n<td><code>LOG_NOWAIT</code></td>\n<td>Do not wait for child processes created during logging.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"syslog-facilities\">Syslog Facilities</h3>\n<table>\n<thead>\n<tr>\n<th>Constant Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LOG_AUTH</code></td>\n<td>Authentication/authorization messages.</td>\n</tr>\n<tr>\n<td><code>LOG_AUTHPRIV</code></td>\n<td>Private authentication messages.</td>\n</tr>\n<tr>\n<td><code>LOG_CRON</code></td>\n<td>Clock daemon (cron and at commands).</td>\n</tr>\n<tr>\n<td><code>LOG_DAEMON</code></td>\n<td>System daemons without separate facility values.</td>\n</tr>\n<tr>\n<td><code>LOG_FTP</code></td>\n<td>FTP server daemon.</td>\n</tr>\n<tr>\n<td><code>LOG_KERN</code></td>\n<td>Kernel messages.</td>\n</tr>\n<tr>\n<td><code>LOG_LPR</code></td>\n<td>Line printer subsystem.</td>\n</tr>\n<tr>\n<td><code>LOG_MAIL</code></td>\n<td>Mail system.</td>\n</tr>\n<tr>\n<td><code>LOG_NEWS</code></td>\n<td>Network news subsystem.</td>\n</tr>\n<tr>\n<td><code>LOG_SYSLOG</code></td>\n<td>Messages generated internally by syslogd.</td>\n</tr>\n<tr>\n<td><code>LOG_USER</code></td>\n<td>Generic user-level messages.</td>\n</tr>\n<tr>\n<td><code>LOG_UUCP</code></td>\n<td>UUCP subsystem.</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL0</code></td>\n<td>Local use 0 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL1</code></td>\n<td>Local use 1 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL2</code></td>\n<td>Local use 2 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL3</code></td>\n<td>Local use 3 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL4</code></td>\n<td>Local use 4 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL5</code></td>\n<td>Local use 5 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL6</code></td>\n<td>Local use 6 (custom facility).</td>\n</tr>\n<tr>\n<td><code>LOG_LOCAL7</code></td>\n<td>Local use 7 (custom facility).</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"syslog-priorities\">Syslog Priorities</h3>\n<table>\n<thead>\n<tr>\n<th>Constant Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LOG_EMERG</code></td>\n<td>System is unusable.</td>\n</tr>\n<tr>\n<td><code>LOG_ALERT</code></td>\n<td>Action must be taken immediately.</td>\n</tr>\n<tr>\n<td><code>LOG_CRIT</code></td>\n<td>Critical conditions.</td>\n</tr>\n<tr>\n<td><code>LOG_ERR</code></td>\n<td>Error conditions.</td>\n</tr>\n<tr>\n<td><code>LOG_WARNING</code></td>\n<td>Warning conditions.</td>\n</tr>\n<tr>\n<td><code>LOG_NOTICE</code></td>\n<td>Normal, but significant, condition.</td>\n</tr>\n<tr>\n<td><code>LOG_INFO</code></td>\n<td>Informational message.</td>\n</tr>\n<tr>\n<td><code>LOG_DEBUG</code></td>\n<td>Debug-level message.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ulog-channels\">Ulog channels</h3>\n<table>\n<thead>\n<tr>\n<th>Constant Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ULOG_KMSG</code></td>\n<td>Log messages to <code>/dev/kmsg</code> (dmesg).</td>\n</tr>\n<tr>\n<td><code>ULOG_STDIO</code></td>\n<td>Log messages to stdout.</td>\n</tr>\n<tr>\n<td><code>ULOG_SYSLOG</code></td>\n<td>Log messages to syslog.</td>\n</tr>\n</tbody>\n</table>"},{"title":"module:log#ERR","link":"<a href=\"module-log.html#ERR\">ERR</a>","description":"<p>Invoke ulog with LOG_ERR.</p>\n<p>This function is convenience wrapper for <code>ulog(LOG_ERR, ...)</code>.</p>\n<p>See {@link module:log#ulog|ulog()} for details.</p>"},{"title":"module:log#INFO","link":"<a href=\"module-log.html#INFO\">INFO</a>","description":"<p>Invoke ulog with LOG_INFO.</p>\n<p>This function is convenience wrapper for <code>ulog(LOG_INFO, ...)</code>.</p>\n<p>See {@link module:log#ulog|ulog()} for details.</p>"},{"title":"module:log#NOTE","link":"<a href=\"module-log.html#NOTE\">NOTE</a>","description":"<p>Invoke ulog with LOG_NOTICE.</p>\n<p>This function is convenience wrapper for <code>ulog(LOG_NOTICE, ...)</code>.</p>\n<p>See {@link module:log#ulog|ulog()} for details.</p>"},{"title":"module:log#WARN","link":"<a href=\"module-log.html#WARN\">WARN</a>","description":"<p>Invoke ulog with LOG_WARNING.</p>\n<p>This function is convenience wrapper for <code>ulog(LOG_WARNING, ...)</code>.</p>\n<p>See {@link module:log#ulog|ulog()} for details.</p>"},{"title":"module:log#closelog","link":"<a href=\"module-log.html#closelog\">closelog</a>","description":"<p>Close connection to system logger.</p>\n<p>The usage of this function is optional, and usually an explicit log\nconnection tear down is not required.</p>"},{"title":"module:log#openlog","link":"<a href=\"module-log.html#openlog\">openlog</a>","description":"<p>Open connection to system logger.</p>\n<p>The <code>openlog()</code> function instructs the program to establish a connection to\nthe system log service and configures the default facility and identification\nfor use in subsequent log operations. It may be omitted, in which case the\nfirst call to <code>syslog()</code> will implicitly call <code>openlog()</code> with a default\nident value representing the program name and a default <code>LOG_USER</code> facility.</p>\n<p>The log option argument may be either a single string value containing an\noption name, an array of option name strings or a numeric value representing\na bitmask of <code>LOG_*</code> option constants.</p>\n<p>The facility argument may be either a single string value containing a\nfacility name or one of the numeric <code>LOG_*</code> facility constants in the module\nnamespace.</p>\n<p>Returns <code>true</code> if the system <code>openlog()</code> function was invoked.</p>\n<p>Returns <code>false</code> if an invalid argument, such as an unrecognized option or\nfacility name, was provided.</p>"},{"title":"module:log#syslog","link":"<a href=\"module-log.html#syslog\">syslog</a>","description":"<p>Log a message to the system logger.</p>\n<p>This function logs a message to the system logger. The function behaves in a\nsprintf-like manner, allowing the use of format strings and associated\narguments to construct log messages.</p>\n<p>If the <code>openlog</code> function has not been called explicitly before, <code>syslog()</code>\nimplicitly calls <code>openlog()</code>, using a default ident and <code>LOG_USER</code> facility\nvalue before logging the message.</p>\n<p>If the <code>format</code> argument is not a string and not <code>null</code>, it will be\nimplicitly converted to a string and logged as-is, without further format\nstring processing.</p>\n<p>Returns <code>true</code> if a message was passed to the system <code>syslog()</code> function.</p>\n<p>Returns <code>false</code> if an invalid priority value or an empty message was given.</p>"},{"title":"module:log#ulog","link":"<a href=\"module-log.html#ulog\">ulog</a>","description":"<p>Log a message via the ulog mechanism.</p>\n<p>The <code>ulog()</code> function outputs the given log message to all configured ulog\nchannels unless the given priority level exceeds the globally configured ulog\npriority threshold. See {@link module:log#ulog_threshold|ulog_threshold()}\nfor details.</p>\n<p>The <code>ulog()</code> function is OpenWrt specific and may not be present on other\nsystems. Use <code>syslog()</code> instead for portability to non-OpenWrt environments.</p>\n<p>Like <code>syslog()</code>, the function behaves in a sprintf-like manner, allowing the\nuse of format strings and associated arguments to construct log messages.</p>\n<p>If the <code>ulog_open()</code> function has not been called explicitly before, <code>ulog()</code>\nimplicitly configures certain defaults, see\n{@link module:log#ulog_open|ulog_open()} for a detailled description.</p>\n<p>If the <code>format</code> argument is not a string and not <code>null</code>, it will be\nimplicitly converted to a string and logged as-is, without further format\nstring processing.</p>\n<p>Returns <code>true</code> if a message was passed to the underlying <code>ulog()</code> function.</p>\n<p>Returns <code>false</code> if an invalid priority value or an empty message was given.</p>"},{"title":"module:log#ulog_close","link":"<a href=\"module-log.html#ulog_close\">ulog_close</a>","description":"<p>Close ulog logger.</p>\n<p>Resets the ulog channels, the default facility and the log ident value to\ndefaults.</p>\n<p>In case the <code>&quot;syslog&quot;</code> channel has been configured, the underlying\n<code>closelog()</code> function will be invoked.</p>\n<p>The usage of this function is optional, and usually an explicit ulog teardown\nis not required.</p>\n<p>The <code>ulog_close()</code> function is OpenWrt specific and may not be present on\nother systems. Use <code>closelog()</code> in conjunction with <code>syslog()</code> instead for\nportability to non-OpenWrt environments.</p>"},{"title":"module:log#ulog_open","link":"<a href=\"module-log.html#ulog_open\">ulog_open</a>","description":"<p>Configure ulog logger.</p>\n<p>This functions configures the ulog mechanism and is analogeous to using the\n<code>openlog()</code> function in conjuncton with <code>syslog()</code>.</p>\n<p>The <code>ulog_open()</code> function is OpenWrt specific and may not be present on\nother systems. Use <code>openlog()</code> and <code>syslog()</code> instead for portability to\nnon-OpenWrt environments.</p>\n<p>A program may use multiple channels to simultaneously output messages using\ndifferent means. The channel argument may either be a single string value\ncontaining a channel name, an array of channel names or a numeric value\nrepresenting a bitmask of <code>ULOG_*</code> channel constants.</p>\n<p>The facility argument may be either a single string value containing a\nfacility name or one of the numeric <code>LOG_*</code> facility constants in the module\nnamespace.</p>\n<p>The default facility value varies, depending on the execution context of the\nprogram. In OpenWrt's preinit boot phase, or when stdout is not connected to\nan interactive terminal, the facility defaults to <code>&quot;daemon&quot;</code> (<code>LOG_DAEMON</code>),\notherwise to <code>&quot;user&quot;</code> (<code>LOG_USER</code>).</p>\n<p>Likewise, the default channel is selected depending on the context. During\nOpenWrt's preinit boot phase, the <code>&quot;kmsg&quot;</code> channel is used, for interactive\nterminals the <code>&quot;stdio&quot;</code> one and for all other cases the <code>&quot;syslog&quot;</code> channel\nis selected.</p>\n<p>Returns <code>true</code> if ulog was configured.</p>\n<p>Returns <code>false</code> if an invalid argument, such as an unrecognized channel or\nfacility name, was provided.</p>"},{"title":"module:log#ulog_threshold","link":"<a href=\"module-log.html#ulog_threshold\">ulog_threshold</a>","description":"<p>Set ulog priority threshold.</p>\n<p>This function configures the application wide log message threshold for log\nmessages emitted with <code>ulog()</code>. Any message with a priority higher (= less\nsevere) than the threshold priority will be discarded. This is useful to\nimplement application wide verbosity settings without having to wrap <code>ulog()</code>\ninvocations into a helper function or guarding code.</p>\n<p>When no explicit threshold has been set, <code>LOG_DEBUG</code> is used by default,\nallowing log messages with all known priorities.</p>\n<p>The <code>ulog_threshold()</code> function is OpenWrt specific and may not be present on\nother systems. There is no syslog equivalent to this ulog specific threshold\nmechanism.</p>\n<p>The priority argument may be either a string value containing a priority name\nor one of the numeric <code>LOG_*</code> priority constants in the module namespace.</p>\n<p>Returns <code>true</code> if a threshold was set.</p>\n<p>Returns <code>false</code> if an invalid priority value was given.</p>"},{"title":"module:log.LogFacility","link":"<a href=\"module-log.html#.LogFacility\">LogFacility</a>","description":"<p>The following log facility strings are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Facility</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&quot;auth&quot;</code></td>\n<td>Authentication/authorization messages.</td>\n</tr>\n<tr>\n<td><code>&quot;authpriv&quot;</code></td>\n<td>Private authentication messages.</td>\n</tr>\n<tr>\n<td><code>&quot;cron&quot;</code></td>\n<td>Clock daemon (cron and at commands).</td>\n</tr>\n<tr>\n<td><code>&quot;daemon&quot;</code></td>\n<td>System daemons without separate facility values.</td>\n</tr>\n<tr>\n<td><code>&quot;ftp&quot;</code></td>\n<td>FTP server daemon.</td>\n</tr>\n<tr>\n<td><code>&quot;kern&quot;</code></td>\n<td>Kernel messages.</td>\n</tr>\n<tr>\n<td><code>&quot;lpr&quot;</code></td>\n<td>Line printer subsystem.</td>\n</tr>\n<tr>\n<td><code>&quot;mail&quot;</code></td>\n<td>Mail system.</td>\n</tr>\n<tr>\n<td><code>&quot;news&quot;</code></td>\n<td>Network news subsystem.</td>\n</tr>\n<tr>\n<td><code>&quot;syslog&quot;</code></td>\n<td>Messages generated internally by syslogd.</td>\n</tr>\n<tr>\n<td><code>&quot;user&quot;</code></td>\n<td>Generic user-level messages.</td>\n</tr>\n<tr>\n<td><code>&quot;uucp&quot;</code></td>\n<td>UUCP subsystem.</td>\n</tr>\n<tr>\n<td><code>&quot;local0&quot;</code></td>\n<td>Local use 0 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local1&quot;</code></td>\n<td>Local use 1 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local2&quot;</code></td>\n<td>Local use 2 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local3&quot;</code></td>\n<td>Local use 3 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local4&quot;</code></td>\n<td>Local use 4 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local5&quot;</code></td>\n<td>Local use 5 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local6&quot;</code></td>\n<td>Local use 6 (custom facility).</td>\n</tr>\n<tr>\n<td><code>&quot;local7&quot;</code></td>\n<td>Local use 7 (custom facility).</td>\n</tr>\n</tbody>\n</table>"},{"title":"module:log.LogOption","link":"<a href=\"module-log.html#.LogOption\">LogOption</a>","description":"<p>The following log option strings are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Log Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&quot;pid&quot;</code></td>\n<td>Include PID with each message.</td>\n</tr>\n<tr>\n<td><code>&quot;cons&quot;</code></td>\n<td>Log to console if an error occurs while sending to syslog.</td>\n</tr>\n<tr>\n<td><code>&quot;ndelay&quot;</code></td>\n<td>Open the connection to the logger immediately.</td>\n</tr>\n<tr>\n<td><code>&quot;odelay&quot;</code></td>\n<td>Delay open until the first message is logged.</td>\n</tr>\n<tr>\n<td><code>&quot;nowait&quot;</code></td>\n<td>Do not wait for child processes created during logging.</td>\n</tr>\n</tbody>\n</table>"},{"title":"module:log.LogPriority","link":"<a href=\"module-log.html#.LogPriority\">LogPriority</a>","description":"<p>The following log priority strings are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Priority</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&quot;emerg&quot;</code></td>\n<td>System is unusable.</td>\n</tr>\n<tr>\n<td><code>&quot;alert&quot;</code></td>\n<td>Action must be taken immediately.</td>\n</tr>\n<tr>\n<td><code>&quot;crit&quot;</code></td>\n<td>Critical conditions.</td>\n</tr>\n<tr>\n<td><code>&quot;err&quot;</code></td>\n<td>Error conditions.</td>\n</tr>\n<tr>\n<td><code>&quot;warning&quot;</code></td>\n<td>Warning conditions.</td>\n</tr>\n<tr>\n<td><code>&quot;notice&quot;</code></td>\n<td>Normal, but significant, condition.</td>\n</tr>\n<tr>\n<td><code>&quot;info&quot;</code></td>\n<td>Informational message.</td>\n</tr>\n<tr>\n<td><code>&quot;debug&quot;</code></td>\n<td>Debug-level message.</td>\n</tr>\n</tbody>\n</table>"},{"title":"module:log.UlogChannel","link":"<a href=\"module-log.html#.UlogChannel\">UlogChannel</a>","description":"<p>The following ulog channel strings are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Channel</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&quot;kmsg&quot;</code></td>\n<td>Log to <code>/dev/kmsg</code>, log messages appear in dmesg.</td>\n</tr>\n<tr>\n<td><code>&quot;syslog&quot;</code></td>\n<td>Use standard <code>syslog()</code> mechanism.</td>\n</tr>\n<tr>\n<td><code>&quot;stdio&quot;</code></td>\n<td>Use stderr for log output.</td>\n</tr>\n</tbody>\n</table>"},{"title":"module:math","link":"<a href=\"module-math.html\">math</a>","description":"<h1 id=\"mathematical-functions\">Mathematical Functions</h1>\n<p>The <code>math</code> module bundles various mathematical and trigonometrical functions.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { pow, rand } from 'math';\n\nlet x = pow(2, 5);\nlet y = rand();\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as math from 'math';\n\nlet x = math.pow(2, 5);\nlet y = math.rand();\n</code></pre>\n<p>Additionally, the math module namespace may also be imported by invoking the\n<code>ucode</code> interpreter with the <code>-lmath</code> switch.</p>"},{"title":"module:math#abs","link":"<a href=\"module-math.html#abs\">abs</a>","description":"<p>Returns the absolute value of the given numeric value.</p>"},{"title":"module:math#atan2","link":"<a href=\"module-math.html#atan2\">atan2</a>","description":"<p>Calculates the principal value of the arc tangent of <code>y</code>/<code>x</code>,\nusing the signs of the two arguments to determine the quadrant\nof the result.</p>\n<p>On success, this function returns the principal value of the arc\ntangent of <code>y</code>/<code>x</code> in radians; the return value is in the range [-pi, pi].</p>\n<ul>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is less than 0, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is greater than 0, +0 (-0) is returned.</li>\n<li>If <code>y</code> is less than 0 and <code>x</code> is +0 or -0, -pi/2 is returned.</li>\n<li>If <code>y</code> is greater than 0 and <code>x</code> is +0 or -0, pi/2 is returned.</li>\n<li>If either <code>x</code> or <code>y</code> is NaN, a NaN is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is -0, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is +0, +0 (-0) is returned.</li>\n<li>If <code>y</code> is a finite value greater (less) than 0, and <code>x</code> is negative\ninfinity, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is a finite value greater (less) than 0, and <code>x</code> is positive\ninfinity, +0 (-0) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity), and <code>x</code> is finite,\npi/2 (-pi/2) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity) and <code>x</code> is negative\ninfinity, +3<em>pi/4 (-3</em>pi/4) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity) and <code>x</code> is positive\ninfinity, +pi/4 (-pi/4) is returned.</li>\n</ul>\n<p>When either <code>x</code> or <code>y</code> can't be converted to a numeric value, <code>NaN</code> is\nreturned.</p>"},{"title":"module:math#cos","link":"<a href=\"module-math.html#cos\">cos</a>","description":"<p>Calculates the cosine of <code>x</code>, where <code>x</code> is given in radians.</p>\n<p>Returns the resulting consine value.</p>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#exp","link":"<a href=\"module-math.html#exp\">exp</a>","description":"<p>Calculates the value of <code>e</code> (the base of natural logarithms)\nraised to the power of <code>x</code>.</p>\n<p>On success, returns the exponential value of <code>x</code>.</p>\n<ul>\n<li>If <code>x</code> is positive infinity, positive infinity is returned.</li>\n<li>If <code>x</code> is negative infinity, <code>+0</code> is returned.</li>\n<li>If the result underflows, a range error occurs, and zero is returned.</li>\n<li>If the result overflows, a range error occurs, and <code>Infinity</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#isnan","link":"<a href=\"module-math.html#isnan\">isnan</a>","description":"<p>Tests whether <code>x</code> is a <code>NaN</code> double.</p>\n<p>This functions checks whether the given argument is of type <code>double</code> with\na <code>NaN</code> (not a number) value.</p>\n<p>Returns <code>true</code> if the value is <code>NaN</code>, otherwise false.</p>\n<p>Note that a value can also be checked for <code>NaN</code> with the expression\n<code>x !== x</code> which only evaluates to <code>true</code> if <code>x</code> is <code>NaN</code>.</p>"},{"title":"module:math#log","link":"<a href=\"module-math.html#log\">log</a>","description":"<p>Calculates the natural logarithm of <code>x</code>.</p>\n<p>On success, returns the natural logarithm of <code>x</code>.</p>\n<ul>\n<li>If <code>x</code> is <code>1</code>, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is positive nfinity, positive infinity is returned.</li>\n<li>If <code>x</code> is zero, then a pole error occurs, and the function\nreturns negative infinity.</li>\n<li>If <code>x</code> is negative (including negative infinity), then a domain\nerror occurs, and <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#pow","link":"<a href=\"module-math.html#pow\">pow</a>","description":"<p>Calculates the value of <code>x</code> raised to the power of <code>y</code>.</p>\n<p>On success, returns the value of <code>x</code> raised to the power of <code>y</code>.</p>\n<ul>\n<li>If the result overflows, a range error occurs, and the function\nreturns <code>Infinity</code>.</li>\n<li>If result underflows, and is not representable, a range error\noccurs, and <code>0.0</code> with the appropriate sign is returned.</li>\n<li>If <code>x</code> is <code>+0</code> or <code>-0</code>, and <code>y</code> is an odd integer less than <code>0</code>,\na pole error occurs <code>Infinity</code> is returned, with the same sign\nas <code>x</code>.</li>\n<li>If <code>x</code> is <code>+0</code> or <code>-0</code>, and <code>y</code> is less than <code>0</code> and not an odd\ninteger, a pole error occurs and <code>Infinity</code> is returned.</li>\n<li>If <code>x</code> is <code>+0</code> (<code>-0</code>), and <code>y</code> is an odd integer greater than <code>0</code>,\nthe result is <code>+0</code> (<code>-0</code>).</li>\n<li>If <code>x</code> is <code>0</code>, and <code>y</code> greater than <code>0</code> and not an odd integer,\nthe result is <code>+0</code>.</li>\n<li>If <code>x</code> is <code>-1</code>, and <code>y</code> is positive infinity or negative infinity,\nthe result is <code>1.0</code>.</li>\n<li>If <code>x</code> is <code>+1</code>, the result is <code>1.0</code> (even if <code>y</code> is <code>NaN</code>).</li>\n<li>If <code>y</code> is <code>0</code>, the result is <code>1.0</code> (even if <code>x</code> is <code>NaN</code>).</li>\n<li>If <code>x</code> is a finite value less than <code>0</code>, and <code>y</code> is a finite\nnoninteger, a domain error occurs, and <code>NaN</code> is returned.</li>\n<li>If the absolute value of <code>x</code> is less than <code>1</code>, and <code>y</code> is negative\ninfinity, the result is positive infinity.</li>\n<li>If the absolute value of <code>x</code> is greater than <code>1</code>, and <code>y</code> is\nnegative infinity, the result is <code>+0</code>.</li>\n<li>If the absolute value of <code>x</code> is less than <code>1</code>, and <code>y</code> is positive\ninfinity, the result is <code>+0</code>.</li>\n<li>If the absolute value of <code>x</code> is greater than <code>1</code>, and <code>y</code> is positive\ninfinity, the result is positive infinity.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> is an odd integer less than <code>0</code>,\nthe result is <code>-0</code>.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> less than <code>0</code> and not an odd\ninteger, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> is an odd integer greater than\n<code>0</code>, the result is negative infinity.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> greater than <code>0</code> and not an odd\ninteger, the result is positive infinity.</li>\n<li>If <code>x</code> is positive infinity, and <code>y</code> less than <code>0</code>, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is positive infinity, and <code>y</code> greater than <code>0</code>, the result is\npositive infinity.</li>\n</ul>\n<p>Returns <code>NaN</code> if either the <code>x</code> or <code>y</code> value can't be converted to a number.</p>"},{"title":"module:math#rand","link":"<a href=\"module-math.html#rand\">rand</a>","description":"<p>Produces a pseudo-random positive integer.</p>\n<p>Returns the calculated pseuo-random value. The value is within the range\n<code>0</code> to <code>RAND_MAX</code> inclusive where <code>RAND_MAX</code> is a platform specific value\nguaranteed to be at least <code>32767</code>.</p>\n<p>The {@link module:math~srand <code>srand()</code>} function sets its argument as the\nseed for a new sequence of pseudo-random integers to be returned by <code>rand()</code>. These sequences are\nrepeatable by calling {@link module:math~srand <code>srand()</code>} with the same\nseed value.</p>\n<p>If no seed value is explicitly set by calling\n{@link module:math~srand <code>srand()</code>} prior to the first call to <code>rand()</code>,\nthe math module will automatically seed the PRNG once, using the current\ntime of day in milliseconds as seed value.</p>"},{"title":"module:math#sin","link":"<a href=\"module-math.html#sin\">sin</a>","description":"<p>Calculates the sine of <code>x</code>, where <code>x</code> is given in radians.</p>\n<p>Returns the resulting sine value.</p>\n<ul>\n<li>When <code>x</code> is positive or negative infinity, a domain error occurs\nand <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#sqrt","link":"<a href=\"module-math.html#sqrt\">sqrt</a>","description":"<p>Calculates the nonnegative square root of <code>x</code>.</p>\n<p>Returns the resulting square root value.</p>\n<ul>\n<li>If <code>x</code> is <code>+0</code> (<code>-0</code>) then <code>+0</code> (<code>-0</code>) is returned.</li>\n<li>If <code>x</code> is positive infinity, positive infinity is returned.</li>\n<li>If <code>x</code> is less than <code>-0</code>, a domain error occurs, and <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#srand","link":"<a href=\"module-math.html#srand\">srand</a>","description":"<p>Seeds the pseudo-random number generator.</p>\n<p>This functions seeds the PRNG with the given value and thus affects the\npseudo-random integer sequence produced by subsequent calls to\n{@link module:math~rand <code>rand()</code>}.</p>\n<p>Setting the same seed value will result in the same pseudo-random numbers\nproduced by {@link module:math~rand <code>rand()</code>}.</p>"},{"title":"module:socket","link":"<a href=\"module-socket.html\">socket</a>","description":"<h1 id=\"socket-module\">Socket Module</h1>\n<p>The <code>socket</code> module provides functions for interacting with sockets.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>import { AF_INET, SOCK_STREAM, create as socket } from 'socket';\n\nlet sock = socket(AF_INET, SOCK_STREAM, 0);\nsock.connect('192.168.1.1', 80);\nsock.send(…);\nsock.recv(…);\nsock.close();\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>import * as socket from 'socket';\n\nlet sock = socket.create(socket.AF_INET, socket.SOCK_STREAM, 0);\nsock.connect('192.168.1.1', 80);\nsock.send(…);\nsock.recv(…);\nsock.close();\n</code></pre>\n<p>Additionally, the socket module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-lsocket</code> switch.</p>"},{"title":"module:socket#addrinfo","link":"<a href=\"module-socket.html#addrinfo\">addrinfo</a>","description":"<p>Resolves the given hostname and optional service name into a list of network\naddresses, according to the provided hints.</p>\n<p>The <code>addrinfo()</code> function provides an API for performing DNS and service name\nresolution. It returns an array of objects, each representing a resolved\naddress.</p>\n<p>Returns an array of resolved addresses.\nReturns <code>null</code> if an error occurred during resolution.</p>"},{"title":"module:socket#connect","link":"<a href=\"module-socket.html#connect\">connect</a>","description":"<p>Creates a network socket and connects it to the specified host and service.</p>\n<p>This high level function combines the functionality of\n{@link module:socket#create|create()},\n{@link module:socket#addrinfo|addrinfo()} and\n{@link module:socket.socket#connect|connect()} to simplify connection\nestablishment with the socket module.</p>"},{"title":"module:socket#create","link":"<a href=\"module-socket.html#create\">create</a>","description":"<p>Creates a network socket instance.</p>\n<p>This function creates a new network socket with the specified domain and\ntype, determined by one of the modules <code>AF_*</code> and <code>SOCK_*</code> constants\nrespectively, and returns the resulting socket instance for use in subsequent\nsocket operations.</p>\n<p>The domain argument specifies the protocol family, such as AF_INET or\nAF_INET6, and defaults to AF_INET if not provided.</p>\n<p>The type argument specifies the socket type, such as SOCK_STREAM or\nSOCK_DGRAM, and defaults to SOCK_STREAM if not provided. It may also\nbe bitwise OR-ed with SOCK_NONBLOCK to enable non-blocking mode or\nSOCK_CLOEXEC to enable close-on-exec semantics.</p>\n<p>The protocol argument may be used to indicate a particular protocol\nto be used with the socket, and it defaults to 0 (automatically\ndetermined protocol) if not provided.</p>\n<p>Returns a socket descriptor representing the newly created socket.</p>\n<p>Returns <code>null</code> if an error occurred during socket creation.</p>"},{"title":"module:socket#error","link":"<a href=\"module-socket.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error when\nthe <em>numeric</em> argument is absent or false.</p>\n<p>Returns a positive (<code>errno</code>) or negative (<code>EAI_*</code> constant) error code number\nwhen the <em>numeric</em> argument is <code>true</code>.</p>\n<p>Returns <code>null</code> if there is no error information.</p>"},{"title":"module:socket#listen","link":"<a href=\"module-socket.html#listen\">listen</a>","description":"<p>Binds a listening network socket to the specified host and service.</p>\n<p>This high-level function combines the functionality of\n{@link module:socket#create|create()},\n{@link module:socket#addrinfo|addrinfo()},\n{@link module:socket.socket#bind|bind()}, and\n{@link module:socket.socket#listen|listen()} to simplify setting up a\nlistening socket with the socket module.</p>"},{"title":"module:socket#nameinfo","link":"<a href=\"module-socket.html#nameinfo\">nameinfo</a>","description":"<p>Resolves the given network address into hostname and service name.</p>\n<p>The <code>nameinfo()</code> function provides an API for reverse DNS lookup and service\nname resolution. It returns an object containing the following properties:</p>\n<ul>\n<li><code>hostname</code>: The resolved hostname.</li>\n<li><code>service</code>: The resolved service name.</li>\n</ul>\n<p>Returns an object representing the resolved hostname and service name.\nReturn <code>null</code> if an error occurred during resolution.</p>"},{"title":"module:socket#poll","link":"<a href=\"module-socket.html#poll\">poll</a>","description":"<p>Polls a number of sockets for state changes.</p>\n<p>Returns an array of <code>[socket, flags]</code> tuples for each socket with pending\nevents. When a tuple is passed as socket argument, it is included as-is into\nthe result tuple array, with the flags entry changed to a bitwise OR-ed value\ndescribing the pending events for this socket. When a plain socket instance\n(or another kind of handle) is passed, a new tuple array is created for this\nsocket within the result tuple array, containing this socket as first and the\nbitwise OR-ed pending events as second element.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:socket#sockaddr","link":"<a href=\"module-socket.html#sockaddr\">sockaddr</a>","description":"<p>Parses the provided address value into a socket address representation.</p>\n<p>This function parses the given address value into a socket address\nrepresentation required for a number of socket operations. The address value\ncan be provided in various formats:</p>\n<ul>\n<li>For IPv4 addresses, it can be a string representing the IP address,\noptionally followed by a port number separated by colon, e.g.\n<code>192.168.0.1:8080</code>.</li>\n<li>For IPv6 addresses, it must be an address string enclosed in square\nbrackets if a port number is specified, otherwise the brackets are\noptional. The address string may also include a scope ID in the form\n<code>%ifname</code> or <code>%number</code>, e.g. <code>[fe80::1%eth0]:8080</code> or <code>fe80::1%15</code>.</li>\n<li>Any string value containing a slash is treated as UNIX domain socket path.</li>\n<li>Alternatively, it can be provided as an array returned by\n{@link module:core#iptoarr|iptoarr()}, representing the address octets.</li>\n<li>It can also be an object representing a network address, with properties\nfor <code>address</code> (the IP address) and <code>port</code> or a single property <code>path</code> to\ndenote a UNIX domain socket address.</li>\n</ul>"},{"title":"module:socket.AddressInfo","link":"<a href=\"module-socket.html#.AddressInfo\">AddressInfo</a>","description":"<p>Represents a network address information object returned by\n{@link module:socket#addrinfo|<code>addrinfo()</code>}.</p>"},{"title":"module:socket.PollSpec","link":"<a href=\"module-socket.html#.PollSpec\">PollSpec</a>","description":"<p>Represents a poll state serving as input parameter and return value type for\n{@link module:socket#poll|<code>poll()</code>}.</p>"},{"title":"module:socket.socket","link":"<a href=\"module-socket.socket.html\">socket</a>","description":"<p>Represents a socket handle.</p>"},{"title":"module:socket.socket#accept","link":"<a href=\"module-socket.socket.html#accept\">accept</a>","description":"<p>Accept a connection on a socket.</p>\n<p>This function accepts a connection on the socket. It extracts the first\nconnection request on the queue of pending connections, creates a new\nconnected socket, and returns a new socket handle referring to that socket.\nThe newly created socket is not in listening state and has no backlog.</p>\n<p>When a optional <code>address</code> dictionary is provided, it is populated with the\nremote address details of the peer socket.</p>\n<p>The optional <code>flags</code> parameter is a bitwise-or-ed number of flags to modify\nthe behavior of accepted peer socket. Possible values are:</p>\n<ul>\n<li><code>SOCK_CLOEXEC</code>: Enable close-on-exec semantics for the new socket.</li>\n<li><code>SOCK_NONBLOCK</code>: Enable nonblocking mode for the new socket.</li>\n</ul>\n<p>Returns a socket handle representing the newly created peer socket of the\naccepted connection.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:socket.socket#bind","link":"<a href=\"module-socket.socket.html#bind\">bind</a>","description":"<p>Binds a socket to a specific address.</p>\n<p>This function binds the socket to the specified address.</p>\n<p>Returns <code>true</code> if the socket is successfully bound.</p>\n<p>Returns <code>null</code> on error, e.g. when the address is in use.</p>"},{"title":"module:socket.socket#close","link":"<a href=\"module-socket.socket.html#close\">close</a>","description":"<p>Closes the socket.</p>\n<p>This function closes the socket, releasing its resources and terminating its\nassociated connections.</p>\n<p>Returns <code>true</code> if the socket was successfully closed.\nReturns <code>null</code> on error.</p>"},{"title":"module:socket.socket#connect","link":"<a href=\"module-socket.socket.html#connect\">connect</a>","description":"<p>Connects the socket to a remote address.</p>\n<p>Attempts to establish a connection to the specified remote address.</p>\n<p>Returns <code>true</code> if the connection is successfully established.\nReturns <code>null</code> if an error occurred during the connection attempt.</p>"},{"title":"module:socket.socket#error","link":"<a href=\"module-socket.socket.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error when\nthe <em>numeric</em> argument is absent or false.</p>\n<p>Returns a positive (<code>errno</code>) or negative (<code>EAI_*</code> constant) error code number\nwhen the <em>numeric</em> argument is <code>true</code>.</p>\n<p>Returns <code>null</code> if there is no error information.</p>"},{"title":"module:socket.socket#fileno","link":"<a href=\"module-socket.socket.html#fileno\">fileno</a>","description":"<p>Returns the UNIX file descriptor number associated with the socket.</p>\n<p>Returns the file descriptor number.</p>\n<p>Returns <code>-1</code> if an error occurred.</p>"},{"title":"module:socket.socket#getopt","link":"<a href=\"module-socket.socket.html#getopt\">getopt</a>","description":"<p>Gets options from the socket.</p>\n<p>Retrieves the value of the specified option from the socket.</p>\n<p>Returns the value of the requested option.</p>\n<p>Returns <code>null</code> if an error occurred or if the option is not supported.</p>"},{"title":"module:socket.socket#listen","link":"<a href=\"module-socket.socket.html#listen\">listen</a>","description":"<p>Listen for connections on a socket.</p>\n<p>This function marks the socket as a passive socket, that is, as a socket that\nwill be used to accept incoming connection requests using <code>accept()</code>.</p>\n<p>The <code>backlog</code> parameter specifies the maximum length to which the queue of\npending connections may grow. If a connection request arrives when the queue\nis full, the client connection might get refused.</p>\n<p>If <code>backlog</code> is not provided, it defaults to 128.</p>\n<p>Returns <code>true</code> if the socket is successfully marked as passive.\nReturns <code>null</code> if an error occurred, e.g. when the requested port is in use.</p>"},{"title":"module:socket.socket#peercred","link":"<a href=\"module-socket.socket.html#peercred\">peercred</a>","description":"<p>Retrieves the peer credentials.</p>\n<p>This function retrieves the remote uid, gid and pid of a connected UNIX\ndomain socket.</p>\n<p>Returns the remote credentials if the operation is successful.\nReturns <code>null</code> on error.</p>"},{"title":"module:socket.socket#peername","link":"<a href=\"module-socket.socket.html#peername\">peername</a>","description":"<p>Retrieves the remote address.</p>\n<p>This function retrieves the remote address of a connected socket.</p>\n<p>Returns the remote address if the operation is successful.\nReturns <code>null</code> on error.</p>"},{"title":"module:socket.socket#recv","link":"<a href=\"module-socket.socket.html#recv\">recv</a>","description":"<p>Receives data from the socket.</p>\n<p>Receives data from the socket handle, optionally specifying the maximum\nlength of data to receive, flags to modify the receive behavior, and an\noptional address dictionary where the function will place the address from\nwhich the data was received (for unconnected sockets).</p>\n<p>Returns a string containing the received data.\nReturns an empty string if the remote side closed the socket.\nReturns <code>null</code> if an error occurred during the receive operation.</p>"},{"title":"module:socket.socket#recvmsg","link":"<a href=\"module-socket.socket.html#recvmsg\">recvmsg</a>","description":"<p>Receives a message from the socket.</p>\n<p>Receives a message from the socket handle, allowing for more complex data\nreception compared to <code>recv()</code>. This includes the ability to receive\nancillary data (such as file descriptors, credentials, etc.), multiple\nmessage segments, and optional flags to modify the receive behavior.</p>\n<p>Returns an object containing the received message data, ancillary data,\nand the sender's address.</p>\n<p>Returns <code>null</code> if an error occurred during the receive operation.</p>"},{"title":"module:socket.socket#send","link":"<a href=\"module-socket.socket.html#send\">send</a>","description":"<p>Sends data through the socket.</p>\n<p>Sends the provided data through the socket handle to the specified remote\naddress, if provided.</p>\n<p>Returns the number of bytes sent.\nReturns <code>null</code> if an error occurred during the send operation.</p>"},{"title":"module:socket.socket#sendmsg","link":"<a href=\"module-socket.socket.html#sendmsg\">sendmsg</a>","description":"<p>Sends a message through the socket.</p>\n<p>Sends a message through the socket handle, supporting complex message\nstructures including multiple data buffers and ancillary data. This function\nallows for precise control over the message content and delivery behavior.</p>\n<p>Returns the number of sent bytes.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:socket.socket#setopt","link":"<a href=\"module-socket.socket.html#setopt\">setopt</a>","description":"<p>Sets options on the socket.</p>\n<p>Sets the specified option on the socket to the given value.</p>\n<p>Returns <code>true</code> if the option was successfully set.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:socket.socket#shutdown","link":"<a href=\"module-socket.socket.html#shutdown\">shutdown</a>","description":"<p>Shutdown part of a full-duplex connection.</p>\n<p>This function shuts down part of the full-duplex connection associated with\nthe socket handle. The <code>how</code> parameter specifies which half of the connection\nto shut down. It can take one of the following constant values:</p>\n<ul>\n<li><code>SHUT_RD</code>: Disables further receive operations.</li>\n<li><code>SHUT_WR</code>: Disables further send operations.</li>\n<li><code>SHUT_RDWR</code>: Disables further send and receive operations.</li>\n</ul>\n<p>Returns <code>true</code> if the shutdown operation is successful.\nReturns <code>null</code> if an error occurred.</p>"},{"title":"module:socket.socket#sockname","link":"<a href=\"module-socket.socket.html#sockname\">sockname</a>","description":"<p>Retrieves the local address.</p>\n<p>This function retrieves the local address of a bound or connected socket.</p>\n<p>Returns the local address if the operation is successful.\nReturns <code>null</code> on error.</p>"},{"title":"module:socket.socket.ControlMessage","link":"<a href=\"module-socket.socket.html#.ControlMessage\">ControlMessage</a>","description":"<p>Represents a single control (ancillary data) message returned\nin the <em>ancillary</em> array by {@link module:socket.socket#recvmsg|<code>recvmsg()</code>}.</p>"},{"title":"module:socket.socket.PeerCredentials","link":"<a href=\"module-socket.socket.html#.PeerCredentials\">PeerCredentials</a>","description":"<p>Represents a credentials information object returned by\n{@link module:socket.socket#peercred|<code>peercred()</code>}.</p>"},{"title":"module:socket.socket.ReceivedMessage","link":"<a href=\"module-socket.socket.html#.ReceivedMessage\">ReceivedMessage</a>","description":"<p>Represents a message object returned by\n{@link module:socket.socket#recvmsg|<code>recvmsg()</code>}.</p>"},{"title":"module:socket.socket.SocketAddress","link":"<a href=\"module-socket.socket.html#.SocketAddress\">SocketAddress</a>"},{"title":"module:socket~Address Families","link":"<a href=\"module-socket.html#~AddressFamilies\">Address Families</a>","description":"<p>Constants representing address families and socket domains.</p>"},{"title":"module:socket~Address Info Flags","link":"<a href=\"module-socket.html#~AddressInfoFlags\">Address Info Flags</a>","description":"<p>The <code>AI_*</code> flags may be passed as bitwise OR-ed number in the <em>flags</em>\nproperty of the <em>hints</em> dictionary argument of\n{@link module:socket#addrinfo|addrinfo()}.</p>"},{"title":"module:socket~IP Protocol Constants","link":"<a href=\"module-socket.html#~IPProtocolConstants\">IP Protocol Constants</a>","description":"<p>The <code>IPPROTO_IP</code> constant specifies the IP protocol number and may be\npassed as third argument to {@link module:socket#create|create()} as well\nas <em>level</em> argument value to {@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}.</p>\n<p>The <code>IP_*</code> constants are option names recognized by\n{@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}, in conjunction with\nthe <code>IPPROTO_IP</code> socket level.</p>"},{"title":"module:socket~IPv6","link":"<a href=\"module-socket.html#~IPv6\">IPv6</a>","description":"<p>The <code>IPPROTO_IPV6</code> constant specifies the IPv6 protocol number and may be\npassed as third argument to {@link module:socket#create|create()} as well\nas <em>level</em> argument value to {@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}.</p>\n<p>The <code>IPV6_*</code> constants are option names recognized by\n{@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}, in conjunction with\nthe <code>IPPROTO_IPV6</code> socket level.</p>"},{"title":"module:socket~Message Flags","link":"<a href=\"module-socket.html#~MessageFlags\">Message Flags</a>","description":"<p>The <code>MSG_*</code> flag constants are commonly used in conjunction with the\n{@link module:socket.socket#send|send()} and\n{@link module:socket.socket#recv|recv()} functions.</p>"},{"title":"module:socket~Name Info Constants","link":"<a href=\"module-socket.html#~NameInfoConstants\">Name Info Constants</a>","description":"<p>The <code>NI_*</code> flags may be passed as bitwise OR-ed number via the <em>flags</em>\nargument of {@link module:socket#nameinfo|nameinfo()}.</p>"},{"title":"module:socket~Packet Socket Constants","link":"<a href=\"module-socket.html#~PacketSocketConstants\">Packet Socket Constants</a>","description":"<p>The <code>SOL_PACKET</code> constant specifies the packet socket level and may be\npassed as <em>level</em> argument value to\n{@link module:socket.socket#getopt|getopt()} and\n{@link module:socket.socket#setopt|setopt()}.</p>\n<p>Most <code>PACKET_*</code> constants are <em>option</em> argument values recognized by\n{@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}, in conjunction with\nthe <code>SOL_PACKET</code> socket level.</p>\n<p>The constants <code>PACKET_MR_PROMISC</code>, <code>PACKET_MR_MULTICAST</code> and\n<code>PACKET_MR_ALLMULTI</code> are used in conjunction with the\n<code>PACKET_ADD_MEMBERSHIP</code> and <code>PACKET_DROP_MEMBERSHIP</code> options to specify\nthe packet socket receive mode.</p>\n<p>The constants <code>PACKET_HOST</code>, <code>PACKET_BROADCAST</code>, <code>PACKET_MULTICAST</code>,\n<code>PACKET_OTHERHOST</code> and <code>PACKET_OUTGOING</code> may be used as <em>packet_type</em>\nvalue in {@link module:socket.socket.SocketAddress|socket address}\nstructures.</p>"},{"title":"module:socket~Poll Event Constants","link":"<a href=\"module-socket.html#~PollEventConstants\">Poll Event Constants</a>","description":"<p>The following constants represent event types for polling operations and\nare set or returned as part of a\n{@link module:socket.PollSpec|PollSpec} tuple by the\n{@link module:socket#poll|poll()} function. When passed via an argument\nPollSpec to <code>poll()</code>, they specify the I/O events to watch for on the\ncorresponding handle. When appearing in a PollSpec returned by <code>poll()</code>,\nthey specify the I/O events that occurred on a watched handle.</p>"},{"title":"module:socket~Shutdown Constants","link":"<a href=\"module-socket.html#~ShutdownConstants\">Shutdown Constants</a>","description":"<p>The <code>SHUT_*</code> constants are passed as argument to the\n{@link module:socket.socket#shutdown|shutdown()} function to specify\nwhich direction of a full duplex connection to shut down.</p>"},{"title":"module:socket~Socket Option Constants","link":"<a href=\"module-socket.html#~SocketOptionConstants\">Socket Option Constants</a>","description":"<p>The <code>SOL_SOCKET</code> constant is passed as <em>level</em> argument to the\n{@link module:socket.socket#getopt|getopt()} and\n{@link module:socket.socket#setopt|setopt()} functions in order to set\nor retrieve generic socket option values.</p>\n<p>The <code>SO_*</code> constants are passed as <em>option</em> argument in conjunction with\nthe <code>SOL_SOCKET</code> level to specify the specific option to get or set on\nthe socket.</p>"},{"title":"module:socket~Socket Types","link":"<a href=\"module-socket.html#~SocketTypes\">Socket Types</a>","description":"<p>The <code>SOCK_*</code> type and flag constants are used by\n{@link module:socket#create|create()} to specify the type of socket to\nopen. The {@link module:socket.socket#accept|accept()} function\nrecognizes the <code>SOCK_NONBLOCK</code> and <code>SOCK_CLOEXEC</code> flags and applies them\nto accepted peer sockets.</p>"},{"title":"module:socket~TCP Protocol Constants","link":"<a href=\"module-socket.html#~TCPProtocolConstants\">TCP Protocol Constants</a>","description":"<p>The <code>IPPROTO_TCP</code> constant specifies the TCP protocol number and may be\npassed as third argument to {@link module:socket#create|create()} as well\nas <em>level</em> argument value to {@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}.</p>\n<p>The <code>TCP_*</code> constants are <em>option</em> argument values recognized by\n{@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}, in conjunction with\nthe <code>IPPROTO_TCP</code> socket level.</p>"},{"title":"module:socket~UDP Protocol Constants","link":"<a href=\"module-socket.html#~UDPProtocolConstants\">UDP Protocol Constants</a>","description":"<p>The <code>IPPROTO_UDP</code> constant specifies the UDP protocol number and may be\npassed as third argument to {@link module:socket#create|create()} as well\nas <em>level</em> argument value to {@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}.</p>\n<p>The <code>UDP_*</code> constants are <em>option</em> argument values recognized by\n{@link module:socket.socket#getopt|getopt()}\nand {@link module:socket.socket#setopt|setopt()}, in conjunction with\nthe <code>IPPROTO_UDP</code> socket level.</p>"},{"title":"module:struct","link":"<a href=\"module-struct.html\">struct</a>","description":"<h1 id=\"handle-packed-binary-data\">Handle Packed Binary Data</h1>\n<p>The <code>struct</code> module provides routines for interpreting byte strings as packed\nbinary data.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { pack, unpack } from 'struct';\n\nlet buffer = pack('bhl', -13, 1234, 444555666);\nlet values = unpack('bhl', buffer);\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as struct from 'struct';\n\nlet buffer = struct.pack('bhl', -13, 1234, 444555666);\nlet values = struct.unpack('bhl', buffer);\n</code></pre>\n<p>Additionally, the struct module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-lstruct</code> switch.</p>\n<h2 id=\"format-strings\">Format Strings</h2>\n<p>Format strings describe the data layout when packing and unpacking data.\nThey are built up from format-characters, which specify the type of data\nbeing packed/unpacked. In addition, special characters control the byte\norder, size and alignment.</p>\n<p>Each format string consists of an optional prefix character which describes\nthe overall properties of the data and one or more format characters which\ndescribe the actual data values and padding.</p>\n<h3 id=\"byte-order%2C-size%2C-and-alignment\">Byte Order, Size, and Alignment</h3>\n<p>By default, C types are represented in the machine's native format and byte\norder, and properly aligned by skipping pad bytes if necessary (according to\nthe rules used by the C compiler).</p>\n<p>This behavior is chosen so that the bytes of a packed struct correspond\nexactly to the memory layout of the corresponding C struct.</p>\n<p>Whether to use native byte ordering and padding or standard formats depends\non the application.</p>\n<p>Alternatively, the first character of the format string can be used to indicate\nthe byte order, size and alignment of the packed data, according to the\nfollowing table:</p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Byte order</th>\n<th>Size</th>\n<th>Alignment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@</code></td>\n<td>native</td>\n<td>native</td>\n<td>native</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>native</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>little-endian</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>big-endian</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>network (= big-endian)</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n</tbody>\n</table>\n<p>If the first character is not one of these, <code>'@'</code> is assumed.</p>\n<p>Native byte order is big-endian or little-endian, depending on the\nhost system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are\nlittle-endian; IBM z and many legacy architectures are big-endian.</p>\n<p>Native size and alignment are determined using the C compiler's\n<code>sizeof</code> expression. This is always combined with native byte order.</p>\n<p>Standard size depends only on the format character; see the table in\nthe <code>format-characters</code> section.</p>\n<p>Note the difference between <code>'@'</code> and <code>'='</code>: both use native byte order,\nbut the size and alignment of the latter is standardized.</p>\n<p>The form <code>'!'</code> represents the network byte order which is always big-endian\nas defined in <code>IETF RFC 1700</code>.</p>\n<p>There is no way to indicate non-native byte order (force byte-swapping); use\nthe appropriate choice of <code>'&lt;'</code> or <code>'&gt;'</code>.</p>\n<p>Notes:</p>\n<p>(1) Padding is only automatically added between successive structure members.\nNo padding is added at the beginning or the end of the encoded struct.</p>\n<p>(2) No padding is added when using non-native size and alignment, e.g.\nwith '&lt;', '&gt;', '=', and '!'.</p>\n<p>(3) To align the end of a structure to the alignment requirement of a\nparticular type, end the format with the code for that type with a repeat\ncount of zero.</p>\n<h3 id=\"format-characters\">Format Characters</h3>\n<p>Format characters have the following meaning; the conversion between C and\nucode values should be obvious given their types.  The 'Standard size' column\nrefers to the size of the packed value in bytes when using standard size;\nthat is, when the format string starts with one of <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'!'</code> or\n<code>'='</code>.  When using native size, the size of the packed value is platform\ndependent.</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>C Type</th>\n<th>Ucode type</th>\n<th>Standard size</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>x</code></td>\n<td><em>pad byte</em></td>\n<td><em>no value</em></td>\n<td></td>\n<td>(7)</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td><code>char</code></td>\n<td>string</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td><code>signed char</code></td>\n<td>int</td>\n<td>1</td>\n<td>(1), (2)</td>\n</tr>\n<tr>\n<td><code>B</code></td>\n<td><code>unsigned char</code></td>\n<td>int</td>\n<td>1</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td><code>_Bool</code></td>\n<td>bool</td>\n<td>1</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td><code>short</code></td>\n<td>int</td>\n<td>2</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td><code>unsigned short</code></td>\n<td>int</td>\n<td>2</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td><code>int</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>I</code></td>\n<td><code>unsigned int</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td><code>long</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>L</code></td>\n<td><code>unsigned long</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>q</code></td>\n<td><code>long long</code></td>\n<td>int</td>\n<td>8</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>Q</code></td>\n<td><code>unsigned long long</code></td>\n<td>int</td>\n<td>8</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>n</code></td>\n<td><code>ssize_t</code></td>\n<td>int</td>\n<td></td>\n<td>(3)</td>\n</tr>\n<tr>\n<td><code>N</code></td>\n<td><code>size_t</code></td>\n<td>int</td>\n<td></td>\n<td>(3)</td>\n</tr>\n<tr>\n<td><code>e</code></td>\n<td>(6)</td>\n<td>double</td>\n<td>2</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td><code>float</code></td>\n<td>double</td>\n<td>4</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td><code>double</code></td>\n<td>double</td>\n<td>8</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td><code>char[]</code></td>\n<td>double</td>\n<td></td>\n<td>(9)</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td><code>char[]</code></td>\n<td>double</td>\n<td></td>\n<td>(8)</td>\n</tr>\n<tr>\n<td><code>P</code></td>\n<td><code>void *</code></td>\n<td>int</td>\n<td></td>\n<td>(5)</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td><code>char[]</code></td>\n<td>string</td>\n<td></td>\n<td>(10)</td>\n</tr>\n</tbody>\n</table>\n<p>Notes:</p>\n<ul>\n<li>\n<p>(1) The <code>'?'</code> conversion code corresponds to the <code>_Bool</code> type defined by\nC99. If this type is not available, it is simulated using a <code>char</code>. In\nstandard mode, it is always represented by one byte.</p>\n</li>\n<li>\n<p>(2) When attempting to pack a non-integer using any of the integer\nconversion codes, this module attempts to convert the given value into an\ninteger. If the value is not convertible, a type error exception is thrown.</p>\n</li>\n<li>\n<p>(3) The <code>'n'</code> and <code>'N'</code> conversion codes are only available for the native\nsize (selected as the default or with the <code>'@'</code> byte order character).\nFor the standard size, you can use whichever of the other integer formats\nfits your application.</p>\n</li>\n<li>\n<p>(4) For the <code>'f'</code>, <code>'d'</code> and <code>'e'</code> conversion codes, the packed\nrepresentation uses the IEEE 754 binary32, binary64 or binary16 format\n(for <code>'f'</code>, <code>'d'</code> or <code>'e'</code> respectively), regardless of the floating-point\nformat used by the platform.</p>\n</li>\n<li>\n<p>(5) The <code>'P'</code> format character is only available for the native byte\nordering (selected as the default or with the <code>'@'</code> byte order character).\nThe byte order character <code>'='</code> chooses to use little- or big-endian\nordering based on the host system. The struct module does not interpret\nthis as native ordering, so the <code>'P'</code> format is not available.</p>\n</li>\n<li>\n<p>(6) The IEEE 754 binary16 &quot;half precision&quot; type was introduced in the 2008\nrevision of the <code>IEEE 754</code> standard. It has a sign bit, a 5-bit exponent\nand 11-bit precision (with 10 bits explicitly stored), and can represent\nnumbers between approximately <code>6.1e-05</code> and <code>6.5e+04</code> at full precision.\nThis type is not widely supported by C compilers: on a typical machine, an\nunsigned short can be used for storage, but not for math operations. See\nthe Wikipedia page on the <code>half-precision floating-point format</code> for more\ninformation.</p>\n</li>\n<li>\n<p>(7) When packing, <code>'x'</code> inserts one NUL byte.</p>\n</li>\n<li>\n<p>(8) The <code>'p'</code> format character encodes a &quot;Pascal string&quot;, meaning a short\nvariable-length string stored in a <em>fixed number of bytes</em>, given by the\ncount. The first byte stored is the length of the string, or 255,\nwhichever is smaller.  The bytes of the string follow.  If the string\npassed in to <code>pack()</code> is too long (longer than the count minus 1), only\nthe leading <code>count-1</code> bytes of the string are stored.  If the string is\nshorter than <code>count-1</code>, it is padded with null bytes so that exactly count\nbytes in all are used.  Note that for <code>unpack()</code>, the <code>'p'</code> format\ncharacter consumes <code>count</code> bytes, but that the string returned can never\ncontain more than 255 bytes.</p>\n</li>\n<li>\n<p>(9) For the <code>'s'</code> format character, the count is interpreted as the length\nof the bytes, not a repeat count like for the other format characters; for\nexample, <code>'10s'</code> means a single 10-byte string mapping to or from a single\nucode byte string, while <code>'10c'</code> means 10 separate one byte character\nelements (e.g., <code>cccccccccc</code>) mapping to or from ten different ucode byte\nstrings. If a count is not given, it defaults to 1. For packing, the\nstring is truncated or padded with null bytes as appropriate to make it\nfit. For unpacking, the resulting bytes object always has exactly the\nspecified number of bytes.  As a special case, <code>'0s'</code> means a single,\nempty string (while <code>'0c'</code> means 0 characters).</p>\n</li>\n<li>\n<p>(10) The <code>*</code> format character serves as wildcard. For <code>pack()</code> it will\nappend the corresponding byte argument string as-is, not applying any\npadding or zero filling. When a repeat count is given, that many bytes of\nthe input byte string argument will be appended at most on <code>pack()</code>,\neffectively truncating longer input strings. For <code>unpack()</code>, the wildcard\nformat will yield a byte string containing the entire remaining input data\nbytes, or - when a repeat count is given - that many bytes of input data\nat most.</p>\n</li>\n</ul>\n<p>A format character may be preceded by an integral repeat count.  For example,\nthe format string <code>'4h'</code> means exactly the same as <code>'hhhh'</code>.</p>\n<p>Whitespace characters between formats are ignored; a count and its format\nmust not contain whitespace though.</p>\n<p>When packing a value <code>x</code> using one of the integer formats (<code>'b'</code>,\n<code>'B'</code>, <code>'h'</code>, <code>'H'</code>, <code>'i'</code>, <code>'I'</code>, <code>'l'</code>, <code>'L'</code>,\n<code>'q'</code>, <code>'Q'</code>), if <code>x</code> is outside the valid range for that format, a type\nerror exception is raised.</p>\n<p>For the <code>'?'</code> format character, the return value is either <code>true</code> or <code>false</code>.\nWhen packing, the truish result value of the argument is used. Either 0 or 1\nin the native or standard bool representation will be packed, and any\nnon-zero value will be <code>true</code> when unpacking.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Note:\nNative byte order examples (designated by the <code>'@'</code> format prefix or\nlack of any prefix character) may not match what the reader's\nmachine produces as\nthat depends on the platform and compiler.</p>\n<p>Pack and unpack integers of three different sizes, using big endian\nordering:</p>\n<pre class=\"prettyprint source\"><code>import { pack, unpack } from 'struct';\n\npack(&quot;>bhl&quot;, 1, 2, 3);  // &quot;\\x01\\x00\\x02\\x00\\x00\\x00\\x03&quot;\nunpack(&quot;>bhl&quot;, &quot;\\x01\\x00\\x02\\x00\\x00\\x00\\x03&quot;);  // [ 1, 2, 3 ]\n</code></pre>\n<p>Attempt to pack an integer which is too large for the defined field:</p>\n<pre class=\"prettyprint source lang-bash\"><code>$ ucode -lstruct -p 'struct.pack(&quot;>h&quot;, 99999)'\nType error: Format 'h' requires numeric argument between -32768 and 32767\nIn [-p argument], line 1, byte 24:\n\n `struct.pack(&quot;>h&quot;, 99999)`\n  Near here -------------^\n</code></pre>\n<p>Demonstrate the difference between <code>'s'</code> and <code>'c'</code> format characters:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;@ccc&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;);  // &quot;123&quot;\npack(&quot;@3s&quot;, &quot;123&quot;);           // &quot;123&quot;\n</code></pre>\n<p>The ordering of format characters may have an impact on size in native\nmode since padding is implicit. In standard mode, the user is\nresponsible for inserting any desired padding.</p>\n<p>Note in the first <code>pack()</code> call below that three NUL bytes were added after\nthe packed <code>'#'</code> to align the following integer on a four-byte boundary.\nIn this example, the output was produced on a little endian machine:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;@ci&quot;, &quot;#&quot;, 0x12131415);  // &quot;#\\x00\\x00\\x00\\x15\\x14\\x13\\x12&quot;\npack(&quot;@ic&quot;, 0x12131415, &quot;#&quot;);  // &quot;\\x15\\x14\\x13\\x12#&quot;\n</code></pre>\n<p>The following format <code>'ih0i'</code> results in two pad bytes being added at the\nend, assuming the platform's ints are aligned on 4-byte boundaries:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;ih0i&quot;, 0x01010101, 0x0202);  // &quot;\\x01\\x01\\x01\\x01\\x02\\x02\\x00\\x00&quot;\n</code></pre>\n<p>Use the wildcard format to extract the remainder of the input data:</p>\n<pre class=\"prettyprint source\"><code>import { unpack } from 'struct';\n\nunpack(&quot;ccc*&quot;, &quot;foobarbaz&quot;);   // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot;, &quot;barbaz&quot; ]\nunpack(&quot;ccc3*&quot;, &quot;foobarbaz&quot;);  // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot;, &quot;bar&quot; ]\n</code></pre>\n<p>Use the wildcard format to pack binary stings as-is into the result data:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;h*h&quot;, 0x0101, &quot;\\x02\\x00\\x03&quot;, 0x0404);  // &quot;\\x01\\x01\\x02\\x00\\x03\\x04\\x04&quot;\npack(&quot;c3*c&quot;, &quot;a&quot;, &quot;foobar&quot;, &quot;c&quot;);  // &quot;afooc&quot;\n</code></pre>"},{"title":"module:struct#buffer","link":"<a href=\"module-struct.html#buffer\">buffer</a>","description":"<p>Creates a new struct buffer instance.</p>\n<p>The <code>buffer()</code> function creates a new struct buffer object that can be used\nfor incremental packing and unpacking of binary data. If an initial data\nstring is provided, the buffer is initialized with this content.</p>\n<p>Note that even when initial data is provided, the buffer position is always\nset to zero. This design assumes that the primary intent when initializing\na buffer with data is to read (unpack) from the beginning. If you want to\nappend data to a pre-initialized buffer, you need to explicitly move the\nposition to the end, either by calling <code>end()</code> or by setting the position\nmanually with <code>pos()</code>.</p>\n<p>Returns a new struct buffer instance.</p>"},{"title":"module:struct#new","link":"<a href=\"module-struct.html#new\">new</a>","description":"<p>Precompile format string.</p>\n<p>The <code>new()</code> function precompiles the given format string argument and returns\na <code>struct</code> object instance useful for packing and unpacking multiple items\nwithout having to recompute the internal format each time.</p>\n<p>Returns an precompiled struct format instance.</p>\n<p>Raises a runtime exception if the format string is invalid.</p>"},{"title":"module:struct#pack","link":"<a href=\"module-struct.html#pack\">pack</a>","description":"<p>Pack given values according to specified format.</p>\n<p>The <code>pack()</code> function creates a byte string containing the argument values\npacked according to the given format string.</p>\n<p>Returns the packed string.</p>\n<p>Raises a runtime exception if a given argument value does not match the\nrequired type of the corresponding format string directive or if and invalid\nformat string is provided.</p>"},{"title":"module:struct#unpack","link":"<a href=\"module-struct.html#unpack\">unpack</a>","description":"<p>Unpack given byte string according to specified format.</p>\n<p>The <code>unpack()</code> function interpretes a byte string according to the given\nformat string and returns the resulting values. If the optional offset\nargument is given, unpacking starts from this byte position within the input.\nIf not specified, the start offset defaults to <code>0</code>, the start of the given\ninput string.</p>\n<p>Returns an array of unpacked values.</p>\n<p>Raises a runtime exception if the format string is invalid or if an invalid\ninput string or offset value is given.</p>"},{"title":"module:struct.buffer","link":"<a href=\"module-struct.buffer.html\">buffer</a>","description":"<p>Represents a struct buffer instance created by <code>buffer()</code>.</p>"},{"title":"module:struct.buffer#end","link":"<a href=\"module-struct.buffer.html#end\">end</a>","description":"<p>Set the buffer position to the end.</p>"},{"title":"module:struct.buffer#get","link":"<a href=\"module-struct.buffer.html#get\">get</a>","description":"<p>Unpack a single value from the buffer at the current position.</p>\n<p>The <code>get()</code> function unpacks a single value from the buffer according to the\nspecified format string, starting at the current buffer position.\nThe format string follows the same syntax as used in <code>struct.unpack()</code>.</p>\n<p>For a detailed explanation of the format string syntax, refer to the\n[&quot;Format Strings&quot; section]{@link module:struct} in the module documentation.</p>\n<p>Alternatively, <code>get()</code> accepts a postive or negative integer as format, which\nspecifies the length of a string to unpack before or after the current\nposition. Negative values extract that many bytes before the current offset\nwhile postive ones extracts that many bytes after.</p>"},{"title":"module:struct.buffer#get","link":"<a href=\"module-struct.buffer.html#get\">get</a>","description":"<p>Unpack multiple values from the buffer at the current position.</p>\n<p>The <code>read()</code> function unpacks multiple values from the buffer according to\nthe specified format string, starting at the current buffer position.\nThe format string follows the same syntax as used in <code>struct.unpack()</code>.</p>\n<p>For a detailed explanation of the format string syntax, refer to the\n[&quot;Format Strings&quot; section]{@link module:struct} in the module documentation.</p>"},{"title":"module:struct.buffer#length","link":"<a href=\"module-struct.buffer.html#length\">length</a>","description":"<p>Get or set the current buffer length.</p>\n<p>If called without arguments, returns the current length of the buffer.\nIf called with a length argument, sets the buffer length to that value,\npadding the data with trailing zero bytes or truncating it depending on\nwhether the updated length is larger or smaller than the current length\nrespectively.</p>\n<p>In case the updated length is smaller than the current buffer offset, the\nposition is updated accordingly, so that it points to the new end of the\ntruncated buffer data.</p>"},{"title":"module:struct.buffer#pos","link":"<a href=\"module-struct.buffer.html#pos\">pos</a>","description":"<p>Get or set the current position in the buffer.</p>\n<p>If called without arguments, returns the current position.\nIf called with a position argument, sets the current position to that value.</p>"},{"title":"module:struct.buffer#pull","link":"<a href=\"module-struct.buffer.html#pull\">pull</a>","description":"<p>Extract and remove all content from the buffer.</p>\n<p>The <code>pull()</code> function returns all content of the buffer as a string\nand resets the buffer to an empty state.</p>"},{"title":"module:struct.buffer#put","link":"<a href=\"module-struct.buffer.html#put\">put</a>","description":"<p>Pack data into the buffer at the current position.</p>\n<p>The <code>put()</code> function packs the given values into the buffer according to\nthe specified format string, starting at the current buffer position.\nThe format string follows the same syntax as used in <code>struct.pack()</code>.</p>\n<p>For a detailed explanation of the format string syntax, refer to the\n[&quot;Format Strings&quot; section]{@link module:struct} in the module\ndocumentation.</p>"},{"title":"module:struct.buffer#set","link":"<a href=\"module-struct.buffer.html#set\">set</a>","description":"<p>Set a slice of the buffer content to given byte value.</p>\n<p>The <code>set()</code> function overwrites a substring of the buffer content with the\ngiven byte value, similar to the C <code>memset()</code> function, between the specified\nstart and end positions.</p>\n<p>Both the start and end position values may be negative, in which case they're\nrelative to the end of the buffer, e.g. <code>set(0, -2)</code> will overwrite the last\ntwo bytes of data with <code>\\x00</code>.</p>\n<p>When the start or end positions are beyond the current buffer length, the\nbuffer is grown accordingly.</p>"},{"title":"module:struct.buffer#slice","link":"<a href=\"module-struct.buffer.html#slice\">slice</a>","description":"<p>Extract a slice of the buffer content.</p>\n<p>The <code>slice()</code> function returns a substring of the buffer content\nbetween the specified start and end positions.</p>\n<p>Both the start and end position values may be negative, in which case they're\nrelative to the end of the buffer, e.g. <code>slice(-3)</code> will extract the last\nthree bytes of data.</p>"},{"title":"module:struct.buffer#start","link":"<a href=\"module-struct.buffer.html#start\">start</a>","description":"<p>Set the buffer position to the start (0).</p>"},{"title":"module:struct.instance","link":"<a href=\"module-struct.instance.html\">instance</a>","description":"<p>Represents a struct instance created by <code>new()</code>.</p>"},{"title":"module:struct.instance#pack","link":"<a href=\"module-struct.instance.html#pack\">pack</a>","description":"<p>Pack given values.</p>\n<p>The <code>pack()</code> function creates a byte string containing the argument values\npacked according to the given format instance.</p>\n<p>Returns the packed string.</p>\n<p>Raises a runtime exception if a given argument value does not match the\nrequired type of the corresponding format string directive.</p>"},{"title":"module:struct.instance#unpack","link":"<a href=\"module-struct.instance.html#unpack\">unpack</a>","description":"<p>Unpack given byte string.</p>\n<p>The <code>unpack()</code> function interpretes a byte string according to the given\nformat instance and returns the resulting values. If the optional offset\nargument is given, unpacking starts from this byte position within the input.\nIf not specified, the start offset defaults to <code>0</code>, the start of the given\ninput string.</p>\n<p>Returns an array of unpacked values.</p>\n<p>Raises a runtime exception if an invalid input string or offset value is\ngiven.</p>"},{"title":"module:uci","link":"<a href=\"module-uci.html\">uci</a>","description":"<h1 id=\"openwrt-uci-configuration\">OpenWrt UCI configuration</h1>\n<p>The <code>uci</code> module provides access to the native OpenWrt\n{@link https://github.com/openwrt/uci libuci} API for reading and\nmanipulating UCI configuration files.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { cursor } from 'uci';\n\nlet ctx = cursor();\nlet hostname = ctx.get_first('system', 'system', 'hostname');\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as uci from 'uci';\n\nlet ctx = uci.cursor();\nlet hostname = ctx.get_first('system', 'system', 'hostname');\n</code></pre>\n<p>Additionally, the uci module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-luci</code> switch.</p>"},{"title":"module:uci#cursor","link":"<a href=\"module-uci.html#cursor\">cursor</a>","description":"<p>Instantiate uci cursor.</p>\n<p>A uci cursor is a context for interacting with uci configuration files. It's\npurpose is to cache and hold changes made to loaded configuration states\nuntil those changes are written out to disk or discared.</p>\n<p>Unsaved and uncommitted changes in a cursor instance are private and not\nvisible to other cursor instances instantiated by the same program or other\nprocesses on the system.</p>\n<p>Returns the instantiated cursor on success.</p>\n<p>Returns <code>null</code> on error, e.g. if an invalid path argument was provided.</p>"},{"title":"module:uci#error","link":"<a href=\"module-uci.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:uci.cursor","link":"<a href=\"module-uci.cursor.html\">cursor</a>","description":"<p>Represents a context for interacting with uci configuration files.</p>\n<p>Operations on uci configurations are performed through a uci cursor object\nwhich operates on in-memory representations of loaded configuration files.</p>\n<p>Any changes made to configuration values are local to the cursor object and\nheld in memory only until they're written out to the filesystem using the\n<code>save()</code> and <code>commit()</code> methods.</p>\n<p>Changes performed in one cursor instance are not reflected in another, unless\nthe first instance writes those changes to the filesystem and the other\ninstance explicitly (re)loads the affected configuration files.</p>"},{"title":"module:uci.cursor#add","link":"<a href=\"module-uci.cursor.html#add\">add</a>","description":"<p>Add anonymous section to given configuration.</p>\n<p>Adds a new anonymous (unnamed) section of the specified type to the given\nconfiguration. In order to add a named section, the three argument form of\n<code>set()</code> should be used instead.</p>\n<p>In contrast to other query functions, <code>add()</code> will not implicitly load the\nconfiguration into the cursor. The configuration either needs to be loaded\nexplicitly through <code>load()</code> beforehand, or implicitly by querying it through\none of the <code>get()</code>, <code>get_all()</code>, <code>get_first()</code> or <code>foreach()</code> functions.</p>\n<p>Returns the autogenerated, ephemeral name of the added unnamed section\non success.</p>\n<p>Returns <code>null</code> on error, e.g. if the targeted configuration was not loaded or\nif an invalid section type value was passed.</p>"},{"title":"module:uci.cursor#changes","link":"<a href=\"module-uci.cursor.html#changes\">changes</a>","description":"<p>Enumerate pending changes.</p>\n<p>The <code>changes()</code> function returns a list of change records for currently\nloaded configuration files, originating both from the cursors associated\ndelta directory and yet unsaved cursor changes.</p>\n<p>When the optional &quot;config&quot; parameter is specified, the requested\nconfiguration is implicitly loaded if it is not already loaded into the\ncursor.</p>\n<p>Returns a dictionary of change record arrays, keyed by configuration name.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration could not be\nloaded.</p>"},{"title":"module:uci.cursor#commit","link":"<a href=\"module-uci.cursor.html#commit\">commit</a>","description":"<p>Update configuration files with accumulated cursor changes.</p>\n<p>The <code>commit()</code> function merges changes made to in-memory copies of loaded\nconfiguration files as well as existing delta records in the cursors\nconfigured delta directory and writes them back into the underlying\nconfiguration files, persistently committing changes to the file system.</p>\n<p>When the optional &quot;config&quot; parameter is omitted, all currently loaded\nconfiguration files with either present delta records or yet unsaved\ncursor changes are updated.</p>\n<p>Returns the <code>true</code> if operation completed successfully.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration was not loaded\nor when a file system error occurred.</p>"},{"title":"module:uci.cursor#configs","link":"<a href=\"module-uci.cursor.html#configs\">configs</a>","description":"<p>Enumerate existing configurations.</p>\n<p>The <code>configs()</code> function yields an array of configuration files present in\nthe cursors associated configuration directory, <code>/etc/config/</code> by default.</p>\n<p>Returns an array of configuration names on success.</p>\n<p>Returns <code>null</code> on error, e.g. due to filesystem errors.</p>"},{"title":"module:uci.cursor#delete","link":"<a href=\"module-uci.cursor.html#delete\">delete</a>","description":"<p>Delete an option or section from given configuration.</p>\n<p>When invoked with three arguments, the function deletes the given option\nwithin the specified section of the given configuration.</p>\n<p>When invoked with two arguments, the function deletes the entire specified\nsection within the given configuration.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the <code>true</code> if specified option or section has been deleted.</p>\n<p>Returns <code>null</code> on error, e.g. if the targeted configuration was not found or\nif an invalid value was passed.</p>"},{"title":"module:uci.cursor#error","link":"<a href=\"module-uci.cursor.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:uci.cursor#foreach","link":"<a href=\"module-uci.cursor.html#foreach\">foreach</a>","description":"<p>Iterate configuration sections.</p>\n<p>The <code>foreach()</code> function iterates all sections of the given configuration,\noptionally filtered by type, and invokes the given callback function for\neach encountered section.</p>\n<p>When the optional &quot;type&quot; parameter is specified, the callback is only invoked\nfor sections of the given type, otherwise it is invoked for all sections.</p>\n<p>The requested configuration is implicitly loaded into the cursor.</p>\n<p>Returns <code>true</code> if the callback was executed successfully at least once.</p>\n<p>Returns <code>false</code> if the callback was never invoked, e.g. when the\nconfiguration is empty or contains no sections of the given type.</p>\n<p>Returns <code>null</code> on error, e.g. when an invalid callback was passed or the\nrequested configuration not found.</p>"},{"title":"module:uci.cursor#get","link":"<a href=\"module-uci.cursor.html#get\">get</a>","description":"<p>Query a single option value or section type.</p>\n<p>When invoked with three arguments, the function returns the value of the\ngiven option, within the specified section of the given configuration.</p>\n<p>When invoked with just a config and section argument, the function returns\nthe type of the specified section.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the configuration value or section type on success.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration does not exist\nor if an invalid argument was passed.</p>"},{"title":"module:uci.cursor#get_all","link":"<a href=\"module-uci.cursor.html#get_all\">get_all</a>","description":"<p>Query a complete section or configuration.</p>\n<p>When invoked with two arguments, the function returns all values of the\nspecified section within the given configuration as dictionary.</p>\n<p>When invoked with just a config argument, the function returns a nested\ndictionary of all sections present within the given configuration.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the section or configuration dictionary on success.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration does not exist\nor if an invalid argument was passed.</p>"},{"title":"module:uci.cursor#get_first","link":"<a href=\"module-uci.cursor.html#get_first\">get_first</a>","description":"<p>Query option value or name of first section of given type.</p>\n<p>When invoked with three arguments, the function returns the value of the\ngiven option within the first found section of the specified type in the\ngiven configuration.</p>\n<p>When invoked with just a config and section type argument, the function\nreturns the name of the first found section of the given type.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the configuration value or section name on success.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration does not exist\nor if an invalid argument was passed.</p>"},{"title":"module:uci.cursor#load","link":"<a href=\"module-uci.cursor.html#load\">load</a>","description":"<p>Explicitly reload configuration file.</p>\n<p>Usually, any attempt to query or modify a value within a given configuration\nwill implicitly load the underlying file into memory. By invoking <code>load()</code>\nexplicitly, a potentially loaded stale configuration is discarded and\nreloaded from the file system, ensuring that the latest state is reflected in\nthe cursor.</p>\n<p>Returns <code>true</code> if the configuration was successfully loaded.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration does not exist.</p>"},{"title":"module:uci.cursor#rename","link":"<a href=\"module-uci.cursor.html#rename\">rename</a>","description":"<p>Rename an option or section in given configuration.</p>\n<p>When invoked with four arguments, the function renames the given option\nwithin the specified section of the given configuration to the provided\nvalue.</p>\n<p>When invoked with three arguments, the function renames the entire specified\nsection to the provided value.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the <code>true</code> if specified option or section has been renamed.</p>\n<p>Returns <code>null</code> on error, e.g. if the targeted configuration was not found or\nif an invalid value was passed.</p>"},{"title":"module:uci.cursor#reorder","link":"<a href=\"module-uci.cursor.html#reorder\">reorder</a>","description":"<p>Reorder sections in given configuration.</p>\n<p>The <code>reorder()</code> function moves a single section by repositioning it to the\ngiven index within the configurations section list.</p>\n<p>The given configuration is implicitly loaded into the cursor if not already\npresent.</p>\n<p>Returns the <code>true</code> if specified section has been moved.</p>\n<p>Returns <code>null</code> on error, e.g. if the targeted configuration was not found or\nif an invalid value was passed.</p>"},{"title":"module:uci.cursor#revert","link":"<a href=\"module-uci.cursor.html#revert\">revert</a>","description":"<p>Revert accumulated cursor changes and associated delta records.</p>\n<p>The <code>revert()</code> function discards any changes made to in-memory copies of\nloaded configuration files and discards any related existing delta records in\nthe  cursors configured delta directory.</p>\n<p>When the optional &quot;config&quot; parameter is omitted, all currently loaded\nconfiguration files with either present delta records or yet unsaved\ncursor changes are reverted.</p>\n<p>Returns the <code>true</code> if operation completed successfully.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration was not loaded\nor when a file system error occurred.</p>"},{"title":"module:uci.cursor#save","link":"<a href=\"module-uci.cursor.html#save\">save</a>","description":"<p>Save accumulated cursor changes to delta directory.</p>\n<p>The <code>save()</code> function writes consolidated changes made to in-memory copies of\nloaded configuration files to the uci delta directory which effectively makes\nthem available to other processes using the same delta directory path as well\nas the <code>uci changes</code> cli command when using the default delta directory.</p>\n<p>Note that uci deltas are overlayed over the actual configuration file values\nso they're reflected by <code>get()</code>, <code>foreach()</code> etc. even if the underlying\nconfiguration files are not actually changed (yet). The delta records may be\neither permanently merged into the configuration by invoking <code>commit()</code> or\nreverted through <code>revert()</code> in order to restore the current state of the\nunderlying configuration file.</p>\n<p>When the optional &quot;config&quot; parameter is omitted, delta records for all\ncurrently loaded configuration files are written.</p>\n<p>In case that neither sharing changes with other processes nor any revert\nfunctionality is required, changes may be committed directly using <code>commit()</code>\ninstead, bypassing any delta record creation.</p>\n<p>Returns the <code>true</code> if operation completed successfully.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration was not loaded\nor when a file system error occurred.</p>"},{"title":"module:uci.cursor#set","link":"<a href=\"module-uci.cursor.html#set\">set</a>","description":"<p>Set option value or add named section in given configuration.</p>\n<p>When invoked with four arguments, the function sets the value of the given\noption within the specified section of the given configuration to the\nprovided value. A value of <code>&quot;&quot;</code> (empty string) can be used to delete an\nexisting option.</p>\n<p>When invoked with three arguments, the function adds a new named section to\nthe given configuration, using the specified type.</p>\n<p>In either case, the given configuration is implicitly loaded into the cursor\nif not already present.</p>\n<p>Returns the <code>true</code> if the named section was added or the specified option was\nset.</p>\n<p>Returns <code>null</code> on error, e.g. if the targeted configuration was not found or\nif an invalid value was passed.</p>"},{"title":"module:uci.cursor#unload","link":"<a href=\"module-uci.cursor.html#unload\">unload</a>","description":"<p>Explicitly unload configuration file.</p>\n<p>The <code>unload()</code> function forcibly discards a loaded configuration state from\nthe cursor so that the next attempt to read or modify that configuration\nwill load it anew from the file system.</p>\n<p>Returns <code>true</code> if the configuration was successfully unloaded.</p>\n<p>Returns <code>false</code> if the configuration was not loaded to begin with.</p>\n<p>Returns <code>null</code> on error, e.g. if the requested configuration does not exist.</p>"},{"title":"module:uci.cursor.ChangeRecord","link":"<a href=\"module-uci.cursor.html#.ChangeRecord\">ChangeRecord</a>","description":"<p>A uci change record is a plain array containing the change operation name as\nfirst element, the affected section ID as second argument and an optional\nthird and fourth argument whose meanings depend on the operation.</p>"},{"title":"module:uci.cursor.SectionCallback","link":"<a href=\"module-uci.cursor.html#.SectionCallback\">SectionCallback</a>","description":"<p>The sections callback is invoked for each section found within the given\nconfiguration and receives the section object and its associated name as\narguments.</p>"},{"title":"module:uci.cursor.SectionObject","link":"<a href=\"module-uci.cursor.html#.SectionObject\">SectionObject</a>","description":"<p>A section object represents the options and their corresponding values\nenclosed within a configuration section, as well as some additional meta data\nsuch as sort indexes and internal ID.</p>\n<p>Any internal metadata fields are prefixed with a dot which isn't an allowed\ncharacter for normal option names.</p>"},{"title":"module:uloop","link":"<a href=\"module-uloop.html\">uloop</a>","description":"<h1 id=\"openwrt-uloop-event-loop\">OpenWrt uloop event loop</h1>\n<p>The <code>uloop</code> binding provides functions for integrating with the OpenWrt\n{@link https://github.com/openwrt/libubox/blob/master/uloop.h uloop library}.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>import { init, handle, timer, interval, process, signal, task, run } from 'uloop';\n\ninit();\n\nhandle(…);\ntimer(…);\ninterval(…);\nprocess(…);\nsignal(…);\ntask(…);\n\nrun();\n</code></pre>\n<p>Alternatively, the module namespace can be imported using a wildcard import\nstatement:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>import * as uloop from 'uloop';\n\nuloop.init();\n\nuloop.handle(…);\nuloop.timer(…);\nuloop.interval(…);\nuloop.process(…);\nuloop.signal(…);\nuloop.task(…);\n\nuloop.run();\n</code></pre>\n<p>Additionally, the uloop binding namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-luloop</code> switch.</p>"},{"title":"module:uloop#cancelling","link":"<a href=\"module-uloop.html#cancelling\">cancelling</a>","description":"<p>Checks if the uloop event loop is currently shutting down.</p>\n<p>This function checks whether the uloop event loop is currently in the process\nof shutting down.</p>"},{"title":"module:uloop#done","link":"<a href=\"module-uloop.html#done\">done</a>","description":"<p>Stops the uloop event loop and cancels pending timeouts and events.</p>\n<p>This function immediately stops the uloop event loop, cancels all pending\ntimeouts and events, unregisters all handles, and deallocates associated\nresources.</p>"},{"title":"module:uloop#end","link":"<a href=\"module-uloop.html#end\">end</a>","description":"<p>Halts the uloop event loop.</p>\n<p>This function halts the uloop event loop, stopping its execution and\npreventing further processing of scheduled events and callbacks.</p>\n<p>Expired timeouts and already queued event callbacks are still run to\ncompletion.</p>"},{"title":"module:uloop#error","link":"<a href=\"module-uloop.html#error\">error</a>","description":"<p>Retrieves the last error message.</p>\n<p>This function retrieves the last error message generated by the uloop event loop.\nIf no error occurred, it returns <code>null</code>.</p>"},{"title":"module:uloop#handle","link":"<a href=\"module-uloop.html#handle\">handle</a>","description":"<p>Creates a handle instance for monitoring file descriptor events.</p>\n<p>This function creates a handle instance for monitoring events on a file\ndescriptor, file, or socket. It takes the file or socket handle, a callback\nfunction to be invoked when the specified IO events occur, and bitwise OR-ed\nflags of IO events (<code>ULOOP_READ</code>, <code>ULOOP_WRITE</code>) that the callback should be\ninvoked for.</p>"},{"title":"module:uloop#init","link":"<a href=\"module-uloop.html#init\">init</a>","description":"<p>Initializes the uloop event loop.</p>\n<p>This function initializes the uloop event loop, allowing subsequent\nusage of uloop functionalities. It takes no arguments.</p>\n<p>Returns <code>true</code> on success.\nReturns <code>null</code> if an error occurred during initialization.</p>"},{"title":"module:uloop#interval","link":"<a href=\"module-uloop.html#interval\">interval</a>","description":"<p>Creates an interval instance for scheduling repeated callbacks.</p>\n<p>This function creates an interval instance for scheduling repeated callbacks\nto be executed at regular intervals. It takes an optional timeout parameter,\nwhich defaults to -1, indicating that the interval is initially not armed\nand can be armed later with the <code>.set(timeout)</code> method. A callback function\nmust be provided to be executed when the interval expires.</p>"},{"title":"module:uloop#process","link":"<a href=\"module-uloop.html#process\">process</a>","description":"<p>Creates a process instance for executing external programs.</p>\n<p>This function creates a process instance for executing external programs.\nIt takes the executable path string, an optional string array as the argument\nvector, an optional dictionary describing environment variables, and a\ncallback function to be invoked when the invoked process ends.</p>"},{"title":"module:uloop#run","link":"<a href=\"module-uloop.html#run\">run</a>","description":"<p>Runs the uloop event loop.</p>\n<p>This function starts running the uloop event loop, allowing it to handle\nscheduled events and callbacks. If a timeout value is provided and is\nnon-negative, the event loop will run for that amount of milliseconds\nbefore returning. If the timeout is omitted or negative, the event loop\nruns indefinitely until explicitly stopped.</p>"},{"title":"module:uloop#running","link":"<a href=\"module-uloop.html#running\">running</a>","description":"<p>Checks if the uloop event loop is currently running.</p>\n<p>This function checks whether the uloop event loop is currently started\nand running.</p>"},{"title":"module:uloop#signal","link":"<a href=\"module-uloop.html#signal\">signal</a>","description":"<p>Creates a signal instance for handling Unix signals.</p>\n<p>This function creates a signal instance for handling Unix signals.\nIt takes the signal name string (with or without &quot;SIG&quot; prefix) or signal\nnumber, and a callback function to be invoked when the specified Unix signal\nis caught.</p>"},{"title":"module:uloop#task","link":"<a href=\"module-uloop.html#task\">task</a>","description":"<p>Creates a task instance for executing background tasks.</p>\n<p>This function creates a task instance for executing background tasks.\nIt takes the task function to be invoked as a background process,\nan optional output callback function to be invoked when output is received\nfrom the task, and an optional input callback function to be invoked\nwhen input is required by the task.</p>"},{"title":"module:uloop#timer","link":"<a href=\"module-uloop.html#timer\">timer</a>","description":"<p>Creates a timer instance for scheduling callbacks.</p>\n<p>This function creates a timer instance for scheduling callbacks to be\nexecuted after a specified timeout duration. It takes an optional timeout\nparameter, which defaults to -1, indicating that the timer is initially not\narmed and can be enabled later by invoking the <code>.set(timeout)</code> method on the\ninstance.</p>\n<p>A callback function must be provided to be executed when the timer expires.</p>"},{"title":"module:uloop.handle","link":"<a href=\"module-uloop.handle.html\">handle</a>","description":"<p>Represents a uloop handle instance as returned by\n{@link module:uloop#handle|handle()}.</p>"},{"title":"module:uloop.handle#delete","link":"<a href=\"module-uloop.handle.html#delete\">delete</a>","description":"<p>Unregisters the uloop handle.</p>\n<p>This method unregisters the uloop handle from the uloop event loop and frees\nany associated resources. After calling this method, the handle instance\nshould no longer be used.</p>"},{"title":"module:uloop.handle#fileno","link":"<a href=\"module-uloop.handle.html#fileno\">fileno</a>","description":"<p>Returns the file descriptor number.</p>\n<p>This method returns the file descriptor number associated with the underlying\nhandle, which might refer to a socket or file instance.</p>"},{"title":"module:uloop.handle#handle","link":"<a href=\"module-uloop.handle.html#handle\">handle</a>","description":"<p>Returns the underlying file or socket instance.</p>\n<p>This method returns the underlying file or socket instance associated with\nthe uloop handle.</p>"},{"title":"module:uloop.interval","link":"<a href=\"module-uloop.interval.html\">interval</a>","description":"<p>Represents a uloop interval timer instance as returned by\n{@link module:uloop#interval|interval()}.</p>"},{"title":"module:uloop.interval#cancel","link":"<a href=\"module-uloop.interval.html#cancel\">cancel</a>","description":"<p>Cancels the uloop interval.</p>\n<p>This method cancels the uloop interval, disarming it and removing it from the\nevent loop. Associated resources are released.</p>"},{"title":"module:uloop.interval#expirations","link":"<a href=\"module-uloop.interval.html#expirations\">expirations</a>","description":"<p>Returns number of times the interval timer fired.</p>\n<p>This method returns the number of times the uloop interval timer has expired\n(fired) since it was instantiated.</p>"},{"title":"module:uloop.interval#remaining","link":"<a href=\"module-uloop.interval.html#remaining\">remaining</a>","description":"<p>Returns the milliseconds until the next expiration.</p>\n<p>This method returns the remaining time until the uloop interval expires\nand triggers again. If the interval is not armed (i.e., disabled),\nit returns -1.</p>"},{"title":"module:uloop.interval#set","link":"<a href=\"module-uloop.interval.html#set\">set</a>","description":"<p>Rearms the uloop interval timer with the specified interval.</p>\n<p>This method rearms the interval timer with the specified interval value,\nallowing it to trigger repeatedly after the specified amount of time. If no\ninterval value is provided or if the provided value is negative, the interval\nremains disabled until rearmed with a positive interval value.</p>"},{"title":"module:uloop.pipe","link":"<a href=\"module-uloop.pipe.html\">pipe</a>","description":"<p>Represents a uloop task communication pipe instance, passed as sole argument\nto the task function by {@link module:uloop#task|task()}.</p>"},{"title":"module:uloop.pipe#receive","link":"<a href=\"module-uloop.pipe.html#receive\">receive</a>","description":"<p>Reads input from the task handle.</p>\n<p>This method reads input from the task communication pipe. The input callback\nfunction registered with the task handle is invoked to return the input data,\nwhich is then serialized, sent over the pipe, and deserialized by the receive\nmethod.</p>"},{"title":"module:uloop.pipe#receiving","link":"<a href=\"module-uloop.pipe.html#receiving\">receiving</a>","description":"<p>Checks if the task handle reads output.</p>\n<p>This method checks if the task handle has an output callback registered.\nIt returns a boolean value indicating whether an output callback is present.</p>"},{"title":"module:uloop.pipe#send","link":"<a href=\"module-uloop.pipe.html#send\">send</a>","description":"<p>Sends a serialized message to the task handle.</p>\n<p>This method serializes the provided message and sends it over the task\ncommunication pipe. In the main thread, the message is deserialized and\npassed as an argument to the output callback function registered with the\ntask handle.</p>"},{"title":"module:uloop.pipe#sending","link":"<a href=\"module-uloop.pipe.html#sending\">sending</a>","description":"<p>Checks if the task handle provides input.</p>\n<p>This method checks if the task handle has an input callback  registered.\nIt returns a boolean value indicating whether an input callback is present.</p>"},{"title":"module:uloop.process","link":"<a href=\"module-uloop.process.html\">process</a>","description":"<p>Represents a uloop process instance as returned by\n{@link module:uloop#process|process()}.</p>"},{"title":"module:uloop.process#delete","link":"<a href=\"module-uloop.process.html#delete\">delete</a>","description":"<p>Unregisters the process from uloop.</p>\n<p>This method unregisters the process from the uloop event loop and releases\nany associated resources. However, note that the operating system process\nitself is not terminated by this method.</p>"},{"title":"module:uloop.process#pid","link":"<a href=\"module-uloop.process.html#pid\">pid</a>","description":"<p>Returns the process ID.</p>\n<p>This method returns the process ID (PID) of the operating system process\nlaunched by {@link module:uloop#process|process().</p>"},{"title":"module:uloop.signal","link":"<a href=\"module-uloop.signal.html\">signal</a>","description":"<p>Represents a uloop signal Unix process signal handler as returned by\n{@link module:uloop#signal|signal()}.</p>"},{"title":"module:uloop.signal#delete","link":"<a href=\"module-uloop.signal.html#delete\">delete</a>","description":"<p>Uninstalls the signal handler.</p>\n<p>This method uninstalls the signal handler, restoring the previous or default\nhandler for the signal, and releasing any associated resources.</p>"},{"title":"module:uloop.signal#signo","link":"<a href=\"module-uloop.signal.html#signo\">signo</a>","description":"<p>Returns the associated signal number.</p>\n<p>This method returns the signal number that this uloop signal handler is\nconfigured to respond to.</p>"},{"title":"module:uloop.task","link":"<a href=\"module-uloop.task.html\">task</a>","description":"<p>Represents a uloop task instance as returned by\n{@link module:uloop#task|task()}.</p>"},{"title":"module:uloop.task#finished","link":"<a href=\"module-uloop.task.html#finished\">finished</a>","description":"<p>Checks if the task ran to completion.</p>\n<p>This method checks if the task function has already run to completion.\nIt returns a boolean value indicating whether the task function has finished\nexecuting.</p>"},{"title":"module:uloop.task#kill","link":"<a href=\"module-uloop.task.html#kill\">kill</a>","description":"<p>Terminates the task process.</p>\n<p>This method terminates the task process. It sends a termination signal to\nthe task process, causing it to exit. Returns <code>true</code> on success, indicating\nthat the task process was successfully terminated. Returns <code>null</code> on error,\nsuch as when the task process has already terminated.</p>"},{"title":"module:uloop.task#pid","link":"<a href=\"module-uloop.task.html#pid\">pid</a>","description":"<p>Returns the process ID.</p>\n<p>This method returns the process ID (PID) of the underlying forked process\nlaunched by {@link module:uloop#task|task().</p>"},{"title":"module:uloop.timer","link":"<a href=\"module-uloop.timer.html\">timer</a>","description":"<p>Represents a uloop timer instance as returned by\n{@link module:uloop#timer|timer()}.</p>"},{"title":"module:uloop.timer#cancel","link":"<a href=\"module-uloop.timer.html#cancel\">cancel</a>","description":"<p>Cancels the uloop timer, disarming it and removing it from the event loop.</p>\n<p>This method destroys the uloop timer and releases its associated resources.</p>"},{"title":"module:uloop.timer#remaining","link":"<a href=\"module-uloop.timer.html#remaining\">remaining</a>","description":"<p>Returns the number of milliseconds until the uloop timer expires.</p>\n<p>This method returns the remaining time until the uloop timer expires. If\nthe timer is not armed (i.e., disabled), it returns -1.</p>"},{"title":"module:uloop.timer#set","link":"<a href=\"module-uloop.timer.html#set\">set</a>","description":"<p>Rearms the uloop timer with the specified timeout.</p>\n<p>This method rearms the uloop timer with the specified timeout value,\nallowing it to trigger after the specified amount of time. If no timeout\nvalue is provided or if the provided value is negative, the timer remains\ndisabled until rearmed with a positive timeout value.</p>"},{"title":"module:uloop~Event Mode Constants","link":"<a href=\"module-uloop.html#~EventModeConstants\">Event Mode Constants</a>","description":"<p>The <code>ULOOP_*</code> constants are passed as bitwise OR-ed number to the\n{@link module:uloop.handle#handle|handle()} function to specify the IO\nevents that should be monitored on the given handle.</p>"},{"title":"module:zlib","link":"<a href=\"module-zlib.html\">zlib</a>","description":"<h1 id=\"zlib-bindings\">Zlib bindings</h1>\n<p>The <code>zlib</code> module provides single-call-oriented functions for interacting with zlib data.</p>"},{"title":"module:zlib#deflate","link":"<a href=\"module-zlib.html#deflate\">deflate</a>","description":"<p>Compresses data in Zlib or gzip format.</p>\n<p>If the input argument is a plain string, it is directly compressed.</p>\n<p>If an array, object or resource value is given, this function will attempt to\ninvoke a <code>read()</code> method on it to read chunks of input text to incrementally\ncompress. Reading will stop if the object's <code>read()</code> method returns\neither <code>null</code> or an empty string.</p>\n<p>Throws an exception on errors.</p>\n<p>Returns the compressed data.</p>"},{"title":"module:zlib#inflate","link":"<a href=\"module-zlib.html#inflate\">inflate</a>","description":"<p>Decompresses data in Zlib or gzip format.</p>\n<p>If the input argument is a plain string, it is directly decompressed.</p>\n<p>If an array, object or resource value is given, this function will attempt to\ninvoke a <code>read()</code> method on it to read chunks of input text to incrementally\ndecompress. Reading will stop if the object's <code>read()</code> method returns\neither <code>null</code> or an empty string.</p>\n<p>Throws an exception on errors.</p>\n<p>Returns the decompressed data.</p>"},{"title":"module:zlib~Compression levels","link":"<a href=\"module-zlib.html#~Compressionlevels\">Compression levels</a>","description":"<p>Constants representing predefined compression levels.</p>"}]}